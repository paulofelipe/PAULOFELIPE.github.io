data <- left_join(gdp.percapita.ppp, openess) %>% na.omit()
dim(data)
data %>% arrange(desc(NY.GDP.PCAP.PP.CD))
library(WDI)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
gdp.percapita.ppp <- WDI(country = "all", indicator = "NY.GDP.PCAP.PP.CD", start = 2000, end = 2000)
openess <- WDI(country = "all", indicator = "NE.TRD.GNFS.ZS", start = 2000, end = 2000)
data <- left_join(gdp.percapita.ppp, openess) %>% na.omit()
dim(data)
data <- data %>%
filter(NE.TRD.GNFS.ZS < 200, NY.GDP.PCAP.PP.CD < 40000) %>%
mutate(NY.GDP.PCAP.PP.CD/1000, Brasil = country=="Brazil")
dim(data)
data.br <- data %>% filter(country == "Brazil")
p1 <- ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("GDP per capita (PPP)") +
ggtitle("(a) Ajustamento Quadrático")
p2 <- ggplot(data, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("log GDP per capita (PPP)")+
ggtitle("(b) Ajustamento Quadrático - log do GDP")
grid.arrange(p1, p2, ncol = 2, top = textGrob("Relação entre Abertura e GDP per capita",gp=gpar(fontsize=16,font=2)))
hist(data$NY.GDP.PCAP.PP.CD)
hist(data$NE.TRD.GNFS.ZS)
hist(log(data$NE.TRD.GNFS.ZS))
hist(log(data$NY.GDP.PCAP.PP.CD))
ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil))
ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS, color = Brasil)) +
geom_point()
library(WDI)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
gdp.percapita.ppp <- WDI(country = "all", indicator = "NY.GDP.PCAP.PP.CD", start = 2000, end = 2000)
openess <- WDI(country = "all", indicator = "NE.TRD.GNFS.ZS", start = 2000, end = 2000)
data <- left_join(gdp.percapita.ppp, openess) %>% na.omit()
dim(data)
data <- data %>%
filter(NE.TRD.GNFS.ZS < 200, NY.GDP.PCAP.PP.CD < 40000) %>%
mutate(NY.GDP.PCAP.PP.CD/1000, Brasil = country=="Brazil")
dim(data)
data.br <- data %>% filter(country == "Brazil")
p1 <- ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS, color = Brasil)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("GDP per capita (PPP)") +
ggtitle("(a) Ajustamento Quadrático")
p2 <- ggplot(data, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("log GDP per capita (PPP)")+
ggtitle("(b) Ajustamento Quadrático - log do GDP")
grid.arrange(p1, p2, ncol = 2, top = textGrob("Relação entre Abertura e GDP per capita",gp=gpar(fontsize=16,font=2)))
library(WDI)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
gdp.percapita.ppp <- WDI(country = "all", indicator = "NY.GDP.PCAP.PP.CD", start = 2000, end = 2000)
openess <- WDI(country = "all", indicator = "NE.TRD.GNFS.ZS", start = 2000, end = 2000)
data <- left_join(gdp.percapita.ppp, openess) %>% na.omit()
dim(data)
data <- data %>%
filter(NE.TRD.GNFS.ZS < 200, NY.GDP.PCAP.PP.CD < 40000) %>%
mutate(NY.GDP.PCAP.PP.CD/1000, Brasil = country=="Brazil")
dim(data)
data.br <- data %>% filter(country == "Brazil")
p1 <- ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS, color = Brasil)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil", color = "black") +
ylab("Grau de Abertura") +
xlab("GDP per capita (PPP)") +
ggtitle("(a) Ajustamento Quadrático")
p2 <- ggplot(data, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("log GDP per capita (PPP)")+
ggtitle("(b) Ajustamento Quadrático - log do GDP")
grid.arrange(p1, p2, ncol = 2, top = textGrob("Relação entre Abertura e GDP per capita",gp=gpar(fontsize=16,font=2)))
library(WDI)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
gdp.percapita.ppp <- WDI(country = "all", indicator = "NY.GDP.PCAP.PP.CD", start = 2000, end = 2000)
openess <- WDI(country = "all", indicator = "NE.TRD.GNFS.ZS", start = 2000, end = 2000)
data <- left_join(gdp.percapita.ppp, openess) %>% na.omit()
dim(data)
data <- data %>%
filter(NE.TRD.GNFS.ZS < 200, NY.GDP.PCAP.PP.CD < 40000) %>%
mutate(NY.GDP.PCAP.PP.CD/1000, Brasil = country=="Brazil")
dim(data)
data.br <- data %>% filter(country == "Brazil")
p1 <- ggplot(data, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = NY.GDP.PCAP.PP.CD, y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil", color = "black") +
ylab("Grau de Abertura") +
xlab("GDP per capita (PPP)") +
ggtitle("(a) Ajustamento Quadrático")
p2 <- ggplot(data, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS)) +
geom_point(aes(color = Brasil)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_bw() +
theme(plot.title = element_text(size = 10)) +
scale_color_manual(values = c("darkred", "green"), guide = FALSE) +
geom_text(data = data.br, aes(x = log(NY.GDP.PCAP.PP.CD), y = NE.TRD.GNFS.ZS * 0.75), size = 4, label = "Brasil") +
ylab("Grau de Abertura") +
xlab("log GDP per capita (PPP)")+
ggtitle("(b) Ajustamento Quadrático - log do GDP")
grid.arrange(p1, p2, ncol = 2, top = textGrob("Relação entre Abertura e GDP per capita",gp=gpar(fontsize=16,font=2)))
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?qplot
library(ggplot2)
?qplot
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?ggplot
data(mtcar)
data(mtcars)
qplot(factor(cyl), wt, data = mtcars, geom = c("boxplot", "jitter"))
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?I
ggplot()
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?geom_smooth
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
library(splines)
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
method = "lm")
data(dsmall)
data(mpg)
library(splines)
qplot(cyl, displ, data = mpg, geom = c("point", "smooth"),
method = "lm")
library(splines)
library(splines)
qplot(cyl, displ, data = mpg, geom = c("point", "smooth"),
method = "lm")
?ggplot
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
summary(lm(cyl ~ poly(displ, 2)))
summary(lm(cyl ~ poly(displ, 2), mpg))
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
