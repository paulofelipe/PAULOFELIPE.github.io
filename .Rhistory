add2 <- function(x, y) {
x + y
}
add(3,5)
add2(3,5)
above <- function(x,n=10) {
use <- x>n
x[use]
}
above(c(1,10,7,11))
above(c(1,10,7,11), 3)
nc <- ncol(y)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
3L
class(3L)
class(3)
library(datasets)
data(iris)
?iris
head(iris)
mean(iris["Species" = virginica,])
mean(iris["Species" = 'virginica',])
mean(iris["Species" = 'virginica',"Sepal.Width"])
mean(iris[,"Sepal.Width"])
mean(iris["Species" == 'virginica',"Sepal.Width"])
mean(iris["Species" == virginica,"Sepal.Width"])
mean(iris["Species" == 'virginica',"Sepal.Width"])
class(iris)
mean(iris[iris$Species == 'virginica',"Sepal.Width"])
mean(iris[iris$Species == "virginica","Sepal.Width"])
mean(iris[iris$Species == "virginica","Sepal.Length"])
teset <- colMeans(iris)
apply(iris[,1:4], 2, mean)
teste <- apply(iris[,1:4], 2, mean)
class(teste)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
teste <- tapply(mtcars$cyl, mtcars$mpg, mean)
class(teste)
head(teste)
teste
teste1 <- with(mtcars, tapply(mpg, cyl, mean))
class(teste1)
teste1
head(mtcars)
mean(mtcars[,4])
mean(mtcars[mtcars$cyl == 4,4])
cyl4 <- mean(mtcars[mtcars$cyl == 4,4])
cyl8 <- mean(mtcars[mtcars$cyl == 8,4])
cyl8
cyl4 - cyl8
abs(cyl4-cyl8)
debug(ls)
ls
ls(getwd())
exit
quit
:q
teste
undebug(ls)
tapply(iris, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
source('~/Development/R workspace/GettingCleaningData/run_analysis.R')
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp
mean(temp)
str(temp)
summary(temp)
install.packages("pdflatex")
intall.packages("pdflatex")
?ToothGrowth
seq(5, 120, length = 40)
seq(5, 120, length = 24)
swirl()
library('swirl')
swirl()
install_from_swirl("Regression Models")
swirl()
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
my <- mean(galton$child)
mu <- mean(galton$child)
sTot <- sum(mu^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum())
sRes <- deviance(sum(galton$child - mu)^2)
sRes <- deviance(sTot)
sRes <- 1+1
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
e
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
fit
summary(fit)
fit$coefficients[1]
mean(wt)
fit$coefficients[2]
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
attach(mtcars)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp
exp - 2 * 0.5591
?mtcars
summary(fit)
fit[[1]]
fit[1]
fit[1][1]
fit[[1]][1]
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]][2]
summary(fit)
fit$coefficients[2]
2 * (fit$coefficients[2] - 2 * 0.5591)
attributes(fit)
w.c <- fit$residuals ^ 2
fit.c <- lm(mpg ~ 1, mtcars)
fit.c.res <- fit.c$residuals ^ 2
sum(fit.c.res)
sum(w.c) /sum(fit.c.res)
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]][2]
fit[[1]][1]
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]][1] + 1/3 * fit[[1]][2]
fit[[1]][1] + 1/3 * fit[[1]][2]
fit[[1]][1] + 3000 * fit[[1]][2]
fit[[1]][1] + 1 * fit[[1]][2]
fit[[1]][1] + 0.6 * fit[[1]][2]
fit[[1]][1] + 6 * fit[[1]][2]
data(mtcars)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
summary(fit2)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit1)
summary(fit2)
summary(fit3)
compare <- anova(fit1, fit2)
compare$Pr
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
lm.influence(fit)$hat
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc
library(h2o)
install.packages("h2o")
install.packages("h2o")
library(h2o)
localH2O = new(“H2OClient”, ip = “127.0.0.1”, port = 54321)
localH2O = new('H2OClient', ip = '127.0.0.1', port = 54321)
localH2O = h2o.init()
localH2O = h2o.init()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("rjson" %in% rownames(installed.packages()))) { install.packages("rjson") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-shannon/26/R")))
library(h2o)
localH2O = h2o.init()
install.packages("h2o")
localH2O = h2o.init()
library(h2o)
localH2O = new('H2OClient', ip = '127.0.0.1', port = 54321)
table(c(letters, strsplit("abdicator", "")[[1]]))-1
table(c(strsplit("abdicator", "")[[1]]))-1
strspli("Hello World!")
strsplit("Hello World!")
strsplit("Hello World!", "")
c(strsplit("Hello World!", ""))
table(c(strsplit("Hello World!", "")))
table(c(strsplit("Hello World!", "")))[order[1]]
table(c(strsplit("Hello World!", "")))[order()]
table(c(strsplit("Hello World!", "")))[order()]
hist(table(c(strsplit("Hello World!", ""))))
barplot(table(c(strsplit("Hello World!", ""))))
barplot(table(c(strsplit(tolower("Hello World!"), ""))))
barplot(table(c(strsplit(sub("[^[:alpha:]]+", "", tolower("Hello World!")), ""))))
barplot(table(c(strsplit(sub("[^[:alpha:]]+", "", tolower("Hello World!")), ""))))
barplot(table(c(letters, strsplit(sub("[^[:alpha:]]+", "", tolower("Hello World!")), ""))))
letters
barplot(table(factor(strsplit(sub("[^[:alpha:]]+", "", tolower("Hello World!")), ""), level = letters)))
barplot(table(factor(strsplit(sub("[^[:alpha:]]+", "", tolower("Hello World!")), "")[[1]], level = letters)))
strsplit("Hello World!", "")
strsplit("Hello World!", "")[[1]]
sub("[^[:alpha:]]+", "", tolower("Hello World!"))
sub("[^[:alpha:]]", "", tolower("Hello World!"))
sub("[^[:alnum:]]", "", tolower("Hello World!"))
sub("[^[:al:]]", "", tolower("Hello World!"))
sub("[^[:alpha:]]", "", tolower("Hello World!"))
sub("[^[:alpha:]]+", "", tolower("Hello World!"))
sub("[^[:alpha:]]", "", tolower("Hello World!"))
sub("[^[a-zA-Z0-9 ]+]", "", tolower("Hello World!"))
sub("[^[a-zA-Z0-9]+]", "", tolower("Hello World!"))
sub("[^[a-zA-Z]+]", "", tolower("Hello World!"))
sub("[^[A-Za-z0-9]+]",tolower("Hello World!"))
sub("[^[A-Za-z0-9]+]", "", tolower("Hello World!"))
sub("[^[:alpha:]]", "", tolower("Hello World!"))
sub("[^[:alpha:]*]", "", tolower("Hello World!"))
sub("[^[:alpha:]]", "", tolower("Hello World!"))
sub("[^[:alpha:]*]", "", tolower("Hello World!"))
texto <- "Hello World!"
barplot(table(factor(strsplit(sub("[^[:alpha:]]+", "", tolower(texto)), "")[[1]], level = letters)))
strsplit(sub("[^[:alpha:]]+", "", tolower(texto)), "")[[1]]
strsplit(sub("[^[:alpha:]]+", "", tolower(texto)), "")
strsplit(sub("[^\w]+", "", tolower(texto)), "")[[1]]
strsplit(sub("[\w]+", "", tolower(texto)), "")[[1]]
strsplit(sub("[/w]+", "", tolower(texto)), "")[[1]]
strsplit(sub("[^/w]+", "", tolower(texto)), "")[[1]]
strsplit(sub("[^[:alpha:]]+", "", tolower(texto)), "")[[1]]
texto <- "Hello World!"
sequencia.de.caracteres <- strsplit(sub("[^[:alpha:]]+", "", tolower(texto)), "")[[1]]
barplot(table(factor(sequencia.de.caracteres)))
barplot(table(factor(sequencia.de.caracteres, levels = letters)))
demo(graphic)
demo(graphics)
2*5
class(2*5)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Mas como saber quais pacotes estão disponíveis para uma determinada tarefa? Muitos pacotes você irá encontrar após uma busca por uma função específica. Todavia, existem algumas páginas que apresentam uma lista de pacotes relacionadas a uma determinada tarefa, que são denominadas de _Task View_. Para exemplificar, veja [aqui](https://cran.r-project.org/web/views/Graphics.html) uma lista de pacotes para realização de gráficos e visualizações.
---
title: "Primeiros Passos"
output: html_document
---
Neste post, você aprenderá um pouco mais sobre os pacotes, trabalhará com o console para fazer algumas operações e ir se familiarizando um pouco mais com o R e aprenderá um pouco sobre como usar as funções disponíveis no R e em seus pacotes.
## Pacotes
Os pacotes do R são um conjunto de funções que são carregadas conjuntamente e que possuem uma documentação sobre as funções disponíveis e como usá-las. Além disso, alguns pacotes também fornecem um conjunto de dados que são usados para replicar os exemplos fornecidos. Por exemplo, o `dplyr` é um pacote que possui um série de funções que facilitam consideravelmente a manipulação de dados.
Você tem duas opções para instalar um pacote: via comando ou usando a funcionalidade do RStudio.
Para instalar via comando, você pode digitar o seguinte comando no terminal:
```{r, eval=FALSE}
install.packages('readxl')
```
Este comando irá instalar o pacote `readxl` que fornece funções para facilitar a importação de dados em arquivos `xls` e `xlsx`. No caso, o pacote fornece duas funções. Uma para listar todas as planilhas que estão em um arquivo do excel e outra para ler os dados de uma planilha pro excel. Em um post futuro sobre a importação de dados, trataremos mais sobre esse pacote. Por enquanto, estamos usando somente como exemplo.
Para realizar a instalação com ajuda do RStudio, basta clicar na aba _Packages_ e depois no botão _Install_. O RStudio irá abrir uma janela como na figura abaixo. Basta você incluir o nome do pacote e clicar em _install_.
[INSERIR FIGURA AQUI]
Mas como saber quais pacotes estão disponíveis para uma determinada tarefa? Muitos pacotes você irá encontrar após uma busca por uma função específica. Todavia, existem algumas páginas que apresentam uma lista de pacotes relacionadas a uma determinada tarefa, que são denominadas de _Task View_. Para exemplificar, veja [aqui](https://cran.r-project.org/web/views/Graphics.html) uma lista de pacotes para realização de gráficos e visualizações.
Para utilizar as funções de um pacote, você deve carregá-lo antes. Para isso, você tem duas opções:
```{r}
library(readxl)
require(readxl)
```
---
title: "Primeiros Passos"
output: html_document
---
Seguindo a proposta da sequência *Kit de sobrevivência em R*, vamos aprofundar um pouco mais no funcionamento do R e como fazer uso disso. Como dito no post anterior, o RStudio apresenta [4 janelas](link para o post), cada uma com sua função. No entanto, podemos dizer que as duas janelas que você mais vai usar são *Editor de Códigos* e o *Console*.
## Usando o console
Sendo bem simplista, R é uma linguagem que funciona com base em comandos. O console é o lugar onde você digita um comando (uma instrução) e em seguida recebe uma resposta com o resultado. Para quem nunca teve contato com nenhuma outra linguagem de programação, esse simples conceito pode parecer um pouco abstrato. Não há como entendê-lo sem ser praticando.
Observe no console do RStudio que há um símbolo `>`. Esse símbolo indica o lugar onde você vai escrever os seus comandos. Pois bem, clique lá e digite `2*5` em seguida aperte _enter_. Você verá o seguinte:
```r
2*5
```
O que aconteceu? Você digitou o comando "multiplique 2 vezes 5" no console, e o R respondeu com o resultado 10. E o que é esse `[1]` na resposta do R? Bom, isso significa que o resultado do seu comando só teve uma linha. Em alguns casos o resultado será mais de uma linha, então o R usa essa notação de
## R como uma grande calculadora
## atribuição de variáveis
## intuição sobre função (mean(), c(), seq(), )
## R como linguagem de script (editor)
## escrevendo seu primeiro script
## Salvando .R e .RData
## instalando pacotes (install, library, require)
## Help (?, ??) e conhecendo pacotes a fundo
```{r, eval=FALSE}
2*5
```
Observe no console do RStudio que há um símbolo `>`. Esse símbolo indica o lugar onde você vai escrever os seus comandos. Pois bem, clique lá e digite `2*5` em seguida aperte _enter_. Você verá o seguinte:
---
title: "Primeiros Passos"
output: html_document
---
Seguindo a proposta da sequência *Kit de sobrevivência em R*, vamos aprofundar um pouco mais no funcionamento do R e como fazer uso disso. Como dito no post anterior, o RStudio apresenta [4 janelas](link para o post), cada uma com sua função. No entanto, podemos dizer que as duas janelas que você mais vai usar são *Editor de Códigos* e o *Console*.
## Usando o console
Sendo bem simplista, R é uma linguagem que funciona com base em comandos. O console é o lugar onde você digita um comando (uma instrução) e em seguida recebe uma resposta com o resultado. Para quem nunca teve contato com nenhuma outra linguagem de programação, esse simples conceito pode parecer um pouco abstrato. Não há como entendê-lo sem ser praticando.
Observe no console do RStudio que há um símbolo `>`. Esse símbolo indica o lugar onde você vai escrever os seus comandos. Pois bem, clique lá e digite `2*5` em seguida aperte _enter_. Você verá o seguinte:
```{r, eval=FALSE}
2*5
```
O que aconteceu? Você digitou o comando "multiplique 2 vezes 5" no console, e o R respondeu com o resultado 10. E o que é esse `[1]` na resposta do R? Bom, isso significa que o resultado do seu comando só teve uma linha. Em alguns casos o resultado será mais de uma linha, então o R usa essa notação de
## R como uma grande calculadora
## atribuição de variáveis
## intuição sobre função (mean(), c(), seq(), )
## R como linguagem de script (editor)
## escrevendo seu primeiro script
## Salvando .R e .RData
## instalando pacotes (install, library, require)
## Help (?, ??) e conhecendo pacotes a fundo
source('~/.active-rstudio-document', echo=TRUE)
Observe no console do RStudio que há um símbolo `>`. Esse símbolo indica o lugar onde você vai escrever os seus comandos. Pois bem, clique lá e digite `2*5` em seguida aperte _enter_. Você verá o seguinte:
Seguindo a proposta da sequência Kit de sobrevivência em R, vamos aprofundar um pouco mais no funcionamento do R e como fazer uso disso. Como dito no post anterior, o RStudio apresenta 4 janelas(link para o post), cada uma com sua função. No entanto, podemos dizer que as duas janelas que você mais vai usar são Editor de Códigos e o Console.
---
title: "Primeiros Passos"
output: html_document
---
Seguindo a proposta da sequência Kit de sobrevivência em R, vamos aprofundar um pouco mais no funcionamento do R e como fazer uso disso. Como dito no post anterior, o RStudio apresenta 4 janelas(link para o post), cada uma com sua função. No entanto, podemos dizer que as duas janelas que você mais vai usar são Editor de Códigos e o Console.
## Usando o console
Sendo bem simplista, R é uma linguagem que funciona com base em comandos. O console é o lugar onde você digita um comando (uma instrução) e em seguida recebe uma resposta com o resultado. Para quem nunca teve contato com nenhuma outra linguagem de programação, esse simples conceito pode parecer um pouco abstrato. Não há como entendê-lo sem ser praticando.
Observe no console do RStudio que há um símbolo `>`. Esse símbolo indica o lugar onde você vai escrever os seus comandos. Pois bem, clique lá e digite `2*5` em seguida aperte _enter_. Você verá o seguinte:
```{r}
2*5
```
O que aconteceu? Você digitou o comando "multiplique 2 vezes 5" no console, e o R respondeu com o resultado 10. E o que é esse `[1]` na resposta do R? Bom, isso significa que o resultado do seu comando só teve uma linha. Em alguns casos o resultado será mais de uma linha, então o R usa essa notação de
## R como uma grande calculadora
## atribuição de variáveis
## intuição sobre função (mean(), c(), seq(), )
## R como linguagem de script (editor)
## escrevendo seu primeiro script
## Salvando .R e .RData
## instalando pacotes (install, library, require)
## Help (?, ??) e conhecendo pacotes a fundo
2 ^ (4 - 3) * 8 / 5 + 10
2 ^ (4 - 3) * -8 / (5 * (10 + 3) * (1 - 10))
2 ^ (4 - 3) * -8 / (5 * (10 + 3))
minha_PRIMEIRA.variavel <- 9 ^ -10
minha_PRIMEIRA.variavel
minha_PRIMEIRA.variavel <- 9 ^ 10
minha_PRIMEIRA.variavel
log(8)
log(1)
log(2)
log(3)
log(4)
sqrt(5)
sqrt(8)
sqrt(16)
install.packages("rmarkdown")
---
source('~/.active-rstudio-document', echo=TRUE)
example(sqrt)
example("log")
x <- 1
y <- 2
z <- x + y
z
2*5
5/3
8^9
1 + 3 * (5 -8)
ines <- 4 * 8
ines
ines
ines + 1
ines <- ines + 1
ines <- ines + 1
ines <- ines + 1
ines <- ines + 1
ines <- ines + 1
ines <- ines + 1
ines
sqrt(16)
log(10)
log(8)
round(log(8), 3)
class(1.3)
##install.packages("dplyr")
setwd("~/Development/paulofelipe.github.io/source")
knitr::opts_chunk$set(fig.path='{{ site.url }}/images/')
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
##install.packages("dplyr")
setwd("~/Development/paulofelipe.github.io/source")
knitr::opts_chunk$set(fig.path='{{ site.url }}/images/')
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
##install.packages("dplyr")
setwd("~/Development/paulofelipe.github.io/source")
knitr::opts_chunk$set(fig.path='{{ site.url }}/images/')
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
##install.packages("dplyr")
setwd("~/Development/paulofelipe.github.io/source")
knitr::opts_chunk$set(fig.path='{{ site.url }}/images/')
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
