<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[r | Full Join]]></title>
  <link href="http://fulljoin.com.br/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://fulljoin.com.br/"/>
  <updated>2016-05-26T13:28:49-03:00</updated>
  <id>http://fulljoin.com.br/</id>
  <author>
    <name><![CDATA[Full Join]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tudo sobre Joins (merge) em R]]></title>
    <link href="http://fulljoin.com.br/blog/2016/05/12/tudo-sobre-joins/"/>
    <updated>2016-05-12T21:00:00-03:00</updated>
    <id>http://fulljoin.com.br/blog/2016/05/12/tudo-sobre-joins</id>
    <content type="html"><![CDATA[<p>Nessa sequência de posts aprenderemos tudo sobre Joins (merges) em R, abordando questões teóricas e práticas, com exemplos usando R base e o pacote dplyr. Após ler esse post, você vai saber o que é, para que serve, quando e como usar diversos tipo de joins.</p>

<!-- More -->

<p>Join é um conceito bastante comum para quem já trabalha com bancos de dados (principalmente com SQL). Porém, para quem está se desenvolvendo em Análise de Dados sem um background em programação de sistemas, talvez esse conceito não seja básico.</p>

<h2 id="afinal-o-que--join-ou-merge">Afinal, o que é Join (ou merge)?</h2>

<p>Nada mais é do que juntar dois conjuntos de dados por meio de um ou mais campos em comum. Esses campos em comum são geralmente chamados de chaves.</p>

<p>Existem vários tipos de joins, dos mais simples aos mais complexos, cada um com sua utilidade e momento certo de uso. Além disso existem várias questões que devem ser observadas no uso de joins, como a granularidade dos dados e ocorrência das amostras nos dois conjuntos de dados.</p>

<h2 id="por-que-usar-joins">Por que usar joins?</h2>

<p>Se você é novo no mundo da manipulação de dados, talvez já tenha se perguntado: “De onde vem essa necessidade de usar joins? Por que insistem em usar tantos códigos e separar os dados uns dos outros em tabelas e arquivos diferentes? Por que não simplificar as coisas?”.</p>

<p>Pois saiba que o uso dos joins é uma consequência direta de uma boa prática imposta pelos bancos de dados relacionais: a normalização. Normalização são “regras” para estruturar seus dados de forma que eles ocupem o menor espaço possível e fiquem bastante consistentes na hora de inserir, alterar ou excluir dados.</p>

<p>No entanto, essas regras adicionam complexidade à estrutura dos dados, e graças a essa complexidade estrutural que surge a necessidade dos joins: juntar dados separados num lugar só.</p>

<p>Em um conjunto de dados normalizado (praticamente TODOS originados de sistemas), existe o conceito de chave: um código que representa uma ocorrência de forma única e inconfundível. Exemplos intuitivos de chave seriam o CPF, o CNPJ, código de um produto, o título de eleitor, etc…</p>

<p>Existem vários tipos de chaves (chave natural, surrogate, chave estrangeira, etc…), mas não vamos entrar nesse nível de detalhe. Para aprofundar mais sobre isso, sugiro <a href="http://www.programmerinterview.com/index.php/database-sql/differences-between-primary-and-foreign-keys/">essa leitura</a>.</p>

<p>Apenas mais uma observação: Os termos e conceitos usados a seguir são originários do mundo dos bancos de dados e SQL, mas, acredite, vale muito a pena conhecer os termos. Portanto, não se assuste! Os conceitos e a utilidade dos tipos de junções são mais importantes do que as nomenclaturas.</p>

<blockquote>
  <p>Dica: se você tem familiaridade com Excel, join nada mais é do que o famoso PROCV().</p>
</blockquote>

<h2 id="inner-join-ou-apenas-join">Inner join (ou apenas join)</h2>

<p>Trata-se do join mais simples, mais básico e mais usado dentre todos os outros tipos. Vamos explicar com um exemplo bem simples. Primeiro, vamos montar o conjunto de dados e carregar o pacote <code>dplyr</code>:</p>

<ul>
  <li><code>empregados</code>, com id, nome, idade, uf e id de um cargo</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in library(dplyr): there is no package called ‘dplyr’</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">id.empregado</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span><span class="o">:</span><span class="m">11</span>
<span class="n">nome.empregado</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Renato</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Miguel</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Paulo</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Patr</span><span class="err">í</span><span class="n">cia</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">In</span><span class="err">ê</span><span class="n">s</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Saulo</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Diego</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Maria</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Jose</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Julia</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tiago</span><span class="err">’</span><span class="p">)</span>
<span class="n">idade</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">25</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">35</span><span class="p">,</span> <span class="m">24</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">)</span>
<span class="n">uf</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">MG</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">DF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">CE</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">DF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">DF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">DF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">RJ</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">SP</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">RS</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">SC</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">BA</span><span class="err">’</span><span class="p">)</span>
<span class="n">id.cargo</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">8</span><span class="p">)</span>
<span class="p">(</span><span class="n">empregados</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">id.empregado</span><span class="p">,</span> <span class="n">nome.empregado</span><span class="p">,</span> <span class="n">idade</span><span class="p">,</span> <span class="n">uf</span><span class="p">,</span> <span class="n">id.cargo</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    id.empregado nome.empregado idade uf id.cargo
## 1             1         Renato    30 MG        4
## 2             2         Miguel    31 DF        4
## 3             3          Paulo    29 CE        4
## 4             4       Patrícia    30 DF        4
## 5             5           Inês    25 DF        5
## 6             6          Saulo    30 DF        4
## 7             7          Diego    30 RJ        6
## 8             8          Maria    35 SP        3
## 9             9           Jose    24 RS        1
## 10           10          Julia    31 SC        2
## 11           11          Tiago    29 BA        8</code></pre></div></p>

<ul>
  <li><code>cargos</code>, com id, nome, e salário do cargo</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">id.cargo</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span><span class="o">:</span><span class="m">7</span>
<span class="n">nome.cargo</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">T</span><span class="err">é</span><span class="n">cnico</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Assistente</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Consultor</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Analista</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Auditor</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Gerente</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Gestor</span><span class="err">’</span><span class="p">)</span>
<span class="n">salario</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">7000</span><span class="p">,</span> <span class="m">4000</span><span class="p">,</span> <span class="m">15000</span><span class="p">,</span> <span class="m">11000</span><span class="p">,</span> <span class="m">10000</span><span class="p">,</span> <span class="m">13000</span><span class="p">,</span> <span class="m">20000</span><span class="p">)</span>
<span class="p">(</span><span class="n">cargos</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">id.cargo</span><span class="p">,</span> <span class="n">nome.cargo</span><span class="p">,</span> <span class="n">salario</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   id.cargo nome.cargo salario
## 1        1    Técnico    7000
## 2        2 Assistente    4000
## 3        3  Consultor   15000
## 4        4   Analista   11000
## 5        5    Auditor   10000
## 6        6    Gerente   13000
## 7        7     Gestor   20000</code></pre></div></p>

<p>Imagine que você recebeu essas dois conjuntos de dados será necessário calcular uma média salarial dos empregados por UF.</p>

<p>Se olharmos apenas <code>empregados</code>, cada ocorrência possui um código de cargo que ocupa, mas não temos nem o nome nem o salário do cargo. Se olharmos apenas <code>cargos</code>, cada ocorrência possui código de cargo mas não informações de quem o ocupa.</p>

<p>Para calcular a média por UF, precisaremos juntar esses dois conjuntos. Nesse caso, faremos isso usando o <em>INNER JOIN</em>.</p>

<p>Esse tipo de join cria um data frame com todos os campos de ambos conjuntos, mas  retornando somente as ocorrências (linhas) que possuem chaves iguais. Nossa chave é o campo <code>id.cargo</code>. Veja:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">merge.r.base</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">merge</span><span class="p">(</span><span class="n">empregados</span><span class="p">,</span> <span class="n">cargos</span><span class="p">))</span> <span class="c1"># inner join com R Base</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    id.cargo id.empregado nome.empregado idade uf nome.cargo salario
## 1         1            9           Jose    24 RS    Técnico    7000
## 2         2           10          Julia    31 SC Assistente    4000
## 3         3            8          Maria    35 SP  Consultor   15000
## 4         4            1         Renato    30 MG   Analista   11000
## 5         4            2         Miguel    31 DF   Analista   11000
## 6         4            4       Patrícia    30 DF   Analista   11000
## 7         4            6          Saulo    30 DF   Analista   11000
## 8         4            3          Paulo    29 CE   Analista   11000
## 9         5            5           Inês    25 DF    Auditor   10000
## 10        6            7          Diego    30 RJ    Gerente   13000</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">join.dplyr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">inner_join</span><span class="p">(</span><span class="n">empregados</span><span class="p">,</span> <span class="n">cargos</span><span class="p">))</span> <span class="c1"># inner join com Dplyr</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): não foi possível encontrar a função “inner_join”</code></pre></div></p>

<blockquote>
  <p>Dica: coloque parênteses entre as atribuições e o R mostrará o resultado dela imediatamente</p>
</blockquote>

<p>Repare que nenhuma pessoa tem o cargo de <code>id.cargo</code> 7, então o cargo <code>Gestor</code> não aparece no conjunto final já que não há chave igual. Repare também que a pessoa <code>Tiago</code> possui <code>id.cargo</code> 8, que não é igual a nenhum cargo, então ele também não aparece.</p>

<p>Tanto o <code>merge()</code> do R base quanto o <code>inner_join()</code> do dplyr tentam descobrir as chaves em comum buscando campos com o mesmo nome. Mas vamos supor que os campos chave tivessem nomes diferentes (o que é bem comum!). Para simular, trocaremos o nome <code>id.cargo</code> em <code>cargos</code>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">names</span><span class="p">(</span><span class="n">cargos</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">cargo</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">nome.cargo</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">salario</span><span class="err">”</span><span class="p">)</span> 
<span class="p">(</span><span class="n">merge.r.base</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">merge</span><span class="p">(</span><span class="n">empregados</span><span class="p">,</span> <span class="n">cargos</span><span class="p">,</span> <span class="n">by.x</span> <span class="o">=</span> <span class="err">“</span><span class="n">id.cargo</span><span class="err">”</span><span class="p">,</span> <span class="n">by.y</span> <span class="o">=</span> <span class="err">“</span><span class="n">cargo</span><span class="err">”</span><span class="p">))</span> <span class="c1"># inner join com R Base, com nomes de chaves diferentes</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    id.cargo id.empregado nome.empregado idade uf nome.cargo salario
## 1         1            9           Jose    24 RS    Técnico    7000
## 2         2           10          Julia    31 SC Assistente    4000
## 3         3            8          Maria    35 SP  Consultor   15000
## 4         4            1         Renato    30 MG   Analista   11000
## 5         4            2         Miguel    31 DF   Analista   11000
## 6         4            4       Patrícia    30 DF   Analista   11000
## 7         4            6          Saulo    30 DF   Analista   11000
## 8         4            3          Paulo    29 CE   Analista   11000
## 9         5            5           Inês    25 DF    Auditor   10000
## 10        6            7          Diego    30 RJ    Gerente   13000</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">join.dplyr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">inner_join</span><span class="p">(</span><span class="n">empregados</span><span class="p">,</span> <span class="n">cargos</span><span class="p">,</span> <span class="n">by</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">id.cargo</span><span class="err">”</span> <span class="o">=</span> <span class="err">“</span><span class="n">cargo</span><span class="err">”</span><span class="p">)))</span> <span class="c1"># inner join com Dplyr com nomes de chaves diferentes</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): não foi possível encontrar a função “inner_join”</code></pre></div></p>

<p>No R base usamos <code>by.x</code> e <code>by.y</code> para especificar o nome do campo chave do primeiro e segundo data.frame. No <code>inner_join()</code> do dplyr usamos um vetor no formato <code>c("chave.x" = "chave.y")</code>.</p>

<p>Resumindo, o inner join retorna todos os campos de ambos os data.frames, mas somente as linhas em que as chaves são iguais.</p>

<h2 id="outer-join">Outer join</h2>

<p>O inner join despreza os registros de ambos os data.frames onde as chaves não coincidem. Mas existem situações em que esse descarte de registro não é interessante. Nesses casos usamos Outer join.</p>

<p>Existem 3 tipos básicos de outer join: full outer join (ou apenas full join), left outer join (ou só left join) e o right outer join (ou só right join).</p>

<p>Vejamos o seguinte exemplo:</p>

<ul>
  <li><code>pacientes</code>, com id do paciente, nome abreviado, e resultados de exame A, B e C</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">id.paciente</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span><span class="o">:</span><span class="m">9</span>
<span class="n">nome.abreviado</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">A.A.M</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">S.S.G.F</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">T.I.A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">L.O.S.M</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Y.Q.W</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">F.A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">T.B.N</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">J.J.L</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">M.S.S</span><span class="err">”</span><span class="p">)</span>
<span class="n">exame.a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">3.8</span><span class="p">,</span> <span class="m">3.8</span><span class="p">,</span> <span class="m">3.9</span><span class="p">,</span> <span class="m">4.0</span><span class="p">,</span> <span class="m">4.4</span><span class="p">,</span> <span class="m">3.8</span><span class="p">,</span> <span class="m">3.7</span><span class="p">,</span> <span class="m">3.6</span><span class="p">,</span> <span class="m">4.0</span><span class="p">)</span>
<span class="n">exame.b</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">109.98</span><span class="p">,</span> <span class="m">109.90</span><span class="p">,</span> <span class="m">109.89</span><span class="p">,</span> <span class="m">109.99</span><span class="p">,</span> <span class="m">110.01</span><span class="p">,</span> <span class="m">109.95</span><span class="p">,</span> <span class="m">109.98</span><span class="p">,</span> <span class="m">109.93</span><span class="p">,</span> <span class="m">110.00</span><span class="p">)</span>
<span class="n">exame.c</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
<span class="n">pacientes</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">id.paciente</span><span class="p">,</span> <span class="n">nome.abreviado</span><span class="p">,</span> <span class="n">exame.a</span><span class="p">,</span> <span class="n">exame.b</span><span class="p">,</span> <span class="n">exame.c</span><span class="p">)</span>
<span class="n">pacientes</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   id.paciente nome.abreviado exame.a exame.b exame.c
## 1           1          A.A.M     3.8  109.98       0
## 2           2        S.S.G.F     3.8  109.90       1
## 3           3          T.I.A     3.9  109.89       1
## 4           4        L.O.S.M     4.0  109.99       0
## 5           5          Y.Q.W     4.4  110.01       1
## 6           6            F.A     3.8  109.95       1
## 7           7          T.B.N     3.7  109.98       0
## 8           8          J.J.L     3.6  109.93       0
## 9           9          M.S.S     4.0  110.00       1</code></pre></div></p>

<ul>
  <li><code>controle</code>, com id do paciente, e o tipo de remédio que tomou</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">id.paciente</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">15</span><span class="p">,</span> <span class="m">25</span><span class="p">)</span>
<span class="n">tipo.remedio</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">)</span>
<span class="n">controle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">id.paciente</span><span class="p">,</span> <span class="n">tipo.remedio</span><span class="p">)</span>
<span class="n">controle</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   id.paciente tipo.remedio
## 1           1            A
## 2           4            B
## 3           5            A
## 4           7            B
## 5           8            A
## 6          11            A
## 7          15            B
## 8          25            B</code></pre></div></p>

<p>Em <code>pacientes</code> temos uma lista de pessoas hospitalizadas com uma mesma doença e o resultado de seus exames. Em <code>controle</code> temos uma lista controlada de pessoas que participaram de um experimento tomando tipo A e tipo B de um remédio.</p>

<p>Você precisa montar um conjunto consolidado para avaliar o se houve impacto dos remédios nos exames dos pacientes hospitalizados, para isso, precisa comparar o exame dos que tomaram remédio e dos que não tomaram. Mas nesse caso queremos um join que preserve todos os registros dos <code>pacientes</code>, e queremos desprezar os registros de <code>controle</code> que não correspondem a pacientes hospitalizados.</p>

<h3 id="left-outer-join-left-join">Left outer join (Left join)</h3>

<p>Portanto, usaremos o left outer join (ou simplesmente left join):</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">left.join.r.base</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">merge</span><span class="p">(</span><span class="n">pacientes</span><span class="p">,</span> <span class="n">controle</span><span class="p">,</span> <span class="n">all.x</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">))</span> <span class="c1"># left join com R base</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   id.paciente nome.abreviado exame.a exame.b exame.c tipo.remedio
## 1           1          A.A.M     3.8  109.98       0            A
## 2           2        S.S.G.F     3.8  109.90       1         &lt;na&gt;
## 3           3          T.I.A     3.9  109.89       1         &lt;na&gt;
## 4           4        L.O.S.M     4.0  109.99       0            B
## 5           5          Y.Q.W     4.4  110.01       1            A
## 6           6            F.A     3.8  109.95       1         &lt;na&gt;
## 7           7          T.B.N     3.7  109.98       0            B
## 8           8          J.J.L     3.6  109.93       0            A
## 9           9          M.S.S     4.0  110.00       1         &lt;na&gt;</code></pre></div></na></na></na></na></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">left.join.dplyr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">left_join</span><span class="p">(</span><span class="n">pacientes</span><span class="p">,</span> <span class="n">controle</span><span class="p">))</span> <span class="c1"># left join com dplyr</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): não foi possível encontrar a função “left_join”</code></pre></div></p>

<p>Repare que nos resultados temos todos os campos de <code>pacientes</code> e <code>controle</code> e temos também todos registros de <code>pacientes</code>. Quando não há ocorrência da chave <code>id.paciente</code> em <code>controle</code>, é colocado um <code>NA</code> no campo.</p>

<p>Chama-se LEFT outer join pois o “conjunto da esquerda”, <code>pacientes</code>, deve prevalecer além da interseção. Ou seja, retorna todos os registros onde as chaves são iguais com todos os campos preenchidos dos dois conjuntos, mas também retorna os registros onde as chaves não são iguais sem valor para os campos do conjunto à direita.</p>

<h3 id="right-outer-join-right-join">Right outer join (Right join)</h3>

<p>O princípio é EXATAMENTE o mesmo do left join. A única diferença é a permanência dos registros do conjunto da direita. Vamos simular o mesmo resultado, usando right join, apenas mudando os conjuntos de lugar na chamada da função:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">right.join.r.base</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">merge</span><span class="p">(</span><span class="n">controle</span><span class="p">,</span> <span class="n">pacientes</span><span class="p">,</span> <span class="n">all.y</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">))</span> <span class="c1"># left join com R base</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   id.paciente tipo.remedio nome.abreviado exame.a exame.b exame.c
## 1           1            A          A.A.M     3.8  109.98       0
## 2           2         &lt;na&gt;        S.S.G.F     3.8  109.90       1
## 3           3         &lt;na&gt;          T.I.A     3.9  109.89       1
## 4           4            B        L.O.S.M     4.0  109.99       0
## 5           5            A          Y.Q.W     4.4  110.01       1
## 6           6         &lt;na&gt;            F.A     3.8  109.95       1
## 7           7            B          T.B.N     3.7  109.98       0
## 8           8            A          J.J.L     3.6  109.93       0
## 9           9         &lt;na&gt;          M.S.S     4.0  110.00       1</code></pre></div></na></na></na></na></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">right.join.dplyr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">right_join</span><span class="p">(</span><span class="n">controle</span><span class="p">,</span> <span class="n">pacientes</span><span class="p">))</span> <span class="c1"># left join com dplyr</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): não foi possível encontrar a função “right_join”</code></pre></div></p>

<p>Temos o mesmo conteúdo, apenas mudando a ordem dos data.frames e ajustando alguns parâmetros na função.</p>

<p>Tanto o left quanto o right join são usados pra preservar todos os registros de apenas “um lado” do join, trazendo os demais campos do outro conjunto como vazio, e preenchido apenas os registros em que as chaves forem iguais.</p>

<h3 id="full-outer-join-full-join">Full outer join (Full join)</h3>

<p>Há situações em que é necessário preservar todos os registros de ambos os conjuntos de dados. Vamos testar o seguinte exemplo:</p>

<ul>
  <li><code>exportacoes</code>, com produto e valor exportado</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">produto</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">C</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">H</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">I</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">J</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">K</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">O</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Y</span><span class="err">”</span><span class="p">)</span>
<span class="n">valor</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">993801</span><span class="p">,</span> <span class="m">1829300</span><span class="p">,</span> <span class="m">833952</span><span class="p">,</span> <span class="m">775831</span><span class="p">,</span> <span class="m">59143</span><span class="p">,</span> <span class="m">1192920</span><span class="p">,</span> <span class="m">6938018</span><span class="p">,</span> <span class="m">2927318</span><span class="p">,</span> <span class="m">393178</span><span class="p">)</span>
<span class="p">(</span><span class="n">exportacoes</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">produto</span><span class="p">,</span> <span class="n">valor</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   produto   valor
## 1       A  993801
## 2       C 1829300
## 3       D  833952
## 4       H  775831
## 5       I   59143
## 6       J 1192920
## 7       K 6938018
## 8       O 2927318
## 9       Y  393178</code></pre></div></p>

<ul>
  <li><code>importacoes</code>, com produto e valor importado</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">produto</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">C</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">E</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">F</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">H</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">I</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">J</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">M</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">N</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">O</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Z</span><span class="err">”</span><span class="p">)</span>
<span class="n">valor</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">983125</span><span class="p">,</span> <span class="m">71983</span><span class="p">,</span> <span class="m">61328</span><span class="p">,</span> <span class="m">51939</span><span class="p">,</span> <span class="m">10928810</span><span class="p">,</span> <span class="m">979192</span><span class="p">,</span> <span class="m">6019278</span><span class="p">,</span> <span class="m">352918</span><span class="p">,</span> <span class="m">178263</span><span class="p">,</span> <span class="m">64129229</span><span class="p">,</span> <span class="m">447009</span><span class="p">,</span> <span class="m">1620129</span><span class="p">)</span>
<span class="p">(</span><span class="n">importacoes</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">produto</span><span class="p">,</span> <span class="n">valor</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    produto    valor
## 1        B   983125
## 2        C    71983
## 3        D    61328
## 4        E    51939
## 5        F 10928810
## 6        H   979192
## 7        I  6019278
## 8        J   352918
## 9        M   178263
## 10       N 64129229
## 11       O   447009
## 12       Z  1620129</code></pre></div></p>

<p>Você recebeu dois conjuntos de dados que representam as importações e as exportações de produtos de um pequeno país. Sua missão é fazer uma simples análise de saldo, balança e fluxo de comércio exterior desse país, e produzir alguns relatórios e gráficos comparando produto a produto.</p>

<p>Sendo assim, não é interessante perder nenhum registro de nenhum dos dois data.frames, ambos devem ser preservados para a comparação.</p>

<p>O join da vez é o full join (nome do blog!). Vejamos:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">full.join.r.base</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">merge</span><span class="p">(</span><span class="n">exportacoes</span><span class="p">,</span> <span class="n">importacoes</span><span class="p">,</span> <span class="n">by.x</span> <span class="o">=</span> <span class="err">“</span><span class="n">produto</span><span class="err">”</span><span class="p">,</span> <span class="n">by.y</span> <span class="o">=</span> <span class="err">“</span><span class="n">produto</span><span class="err">”</span><span class="p">,</span> <span class="n">all.x</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">all.y</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">))</span> <span class="c1"># left join com R base</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    produto valor.x  valor.y
## 1        A  993801       NA
## 2        C 1829300    71983
## 3        D  833952    61328
## 4        H  775831   979192
## 5        I   59143  6019278
## 6        J 1192920   352918
## 7        K 6938018       NA
## 8        O 2927318   447009
## 9        Y  393178       NA
## 10       B      NA   983125
## 11       E      NA    51939
## 12       F      NA 10928810
## 13       M      NA   178263
## 14       N      NA 64129229
## 15       Z      NA  1620129</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="n">full.join.dplyr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">full_join</span><span class="p">(</span><span class="n">exportacoes</span><span class="p">,</span> <span class="n">importacoes</span><span class="p">,</span> <span class="n">by</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">produto</span><span class="err">”</span> <span class="o">=</span> <span class="err">“</span><span class="n">produto</span><span class="err">”</span><span class="p">)))</span> <span class="c1"># left join com dplyr</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Error in eval(expr, envir, enclos): não foi possível encontrar a função “full_join”</code></pre></div></p>

<p>Repare que em nosso exemplo há uma particularidade com as chaves. Quando não explicitamos na função os nomes das chaves em <code>by</code>, o join é feito pelos campos com nomes iguais. Mas nesse caso, ambos os campos <code>produto</code> e <code>valor</code> têm nomes iguais nos dois data.frames. Precisamos então explicitar o que queremos que seja chave: apenas <code>produto</code>.</p>

<p>O full join preserva todos os registros de ambos os conjuntos. Quando as chaves são iguais, retorna preenchido em todos os campos, quando não são iguais, retorna <code>NA</code> em qualquer um dos “lados”.</p>

<p>Em nosso exemplo, alguns produtos foram somente exportados e alguns foram somente importados, bem como alguns foram exportados e importados. Como precisamos da totalidade das exportações e importações, o full join atende bem nossa necessidade. Com esse resultado já poderíamos partir para análise do comércio desse país.</p>

<h2 id="prximos-posts">Próximos posts</h2>

<p>Em breve faremos mais posts sobre joins, explicando alguns outros tipos menos comuns, como CROSS JOIN, SEMI JOIN, ANTI JOIN, SELF JOIN.</p>

<p>Até o momento apresentamos junções baseadas na igualdade de joins (equi joins), mas nos próximos posts sobre o assunto mostraremos exemplos onde a comparação das chaves não se da por relação de igualdade (theta join).</p>

<h2 id="referncias">Referências</h2>

<ul>
  <li><a href="http://stat545.com/bit001_dplyr-cheatsheet.html">Cheatsheet for dplyr join functions</a></li>
  <li><a href="http://www.rforexcelusers.com/book/shape-your-data/merging-data-frames/">R for Excel users: Merging Data Frames</a></li>
  <li><a href="http://www.dummies.com/how-to/content/how-to-use-the-merge-function-with-data-sets-in-r.html">How to Use the merge() Function with Data Sets in R</a></li>
  <li><a href="http://www.princeton.edu/~mattg/statar/join-and-reshape.html">R for Stat users: Join datasets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kit de sobrevivência em R - Parte 7: Avançando e Aprofundando]]></title>
    <link href="http://fulljoin.com.br/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7/"/>
    <updated>2016-05-09T20:04:00-03:00</updated>
    <id>http://fulljoin.com.br/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7</id>
    <content type="html"><![CDATA[<p>Chegamos ao fim do <a href="/blog/categories/introducao-ao-r">kit de sobrevivência em R</a>. Nesse último post da série vamos retomar alguns pontos que merecem ser complementados e revisados, além de apresentar um pouco mais de transformações e operações usando apenas funções básicas do R.</p>

<!-- More -->

<p>Se você seguiu a sequência e chegou até aqui, parabéns! Você provavelmente conhece o básico de R e o suficiente para começar a aprofundar em aspectos mais interessantes sobre operações com massas de dados.</p>

<h2 id="breve-reviso-sobre-pacotes">Breve revisão sobre pacotes</h2>

<p>Mostramos que pacotes são conjuntos de funções específicas agrupadas para objetivos temáticos: carregar dados, gráficos, machine learning. É muito simples carregar e utilizar pacotes. Vamos relembrar os principais comandos envolvidos:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">??</span><span class="n">dplyr</span> <span class="c1">#conhecendo um pacote que não foi carregado ainda</span>
<span class="n">install.packages</span><span class="p">(</span><span class="err">‘</span><span class="n">dplyr</span><span class="err">’</span><span class="p">)</span> <span class="c1">#instalando um pacote</span>
<span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span> <span class="c1">#carregando um pacote para uso</span>
<span class="o">?</span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span> <span class="c1">#conhecendo alguma função do pacote</span></code></pre></div></p>

<h2 id="carregando-dados">Carregando dados</h2>

<p>Lembre-se que antes de carregar um arquivo de dados você precisa informar onde o R deve ler o arquivo. Para isso usamos o comando <code>setwd()</code>.</p>

<p>A função mais básica para leitura de dados estruturados (csv, tabular, tamanho fixo, com separadores, etc.) é o famoso <code>read.table()</code>. Lembra dos principais parâmetros? Nome do arquivo, separador, se tem cabeçalho ou não, e, no caso de campos com tamanho fixo, o tamanho de cada campo.</p>

<p>Se quiser exercitar com diversos arquivos de dados diferentes, tente o <a href="http://dados.gov.br/">Portal Brasileiro de Dados Abertos</a> ou <a href="https://github.com/caesar0301/awesome-public-datasets">esse repositório de dados públicos</a> (em inglês).</p>

<p>Comentamos sobre algumas funções básicas para começar a explorar seus dados carregados. Você lembra?</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">?</span><span class="n">head</span><span class="p">()</span>
<span class="o">?</span><span class="n">tail</span><span class="p">()</span>
<span class="o">?</span><span class="n">str</span><span class="p">()</span></code></pre></div></p>

<blockquote>
  <p>Dica: se estiver usando o RStudio, tente visualizar seu data.frame com a função <code>View()</code> (com V maiúsculo). Ela cria uma planilha para ver melhor os dados!</p>
</blockquote>

<h2 id="tipos-e-estrutura-de-dados">Tipos e estrutura de dados</h2>

<p>Conhecer os tipos e estruturas de dados em R será fundamental daqui pra frente. Achamos importante revisar e apresentar alguns dos principais.</p>

<h3 id="tipos-bsicos">Tipos básicos</h3>

<table>
  <thead>
    <tr>
      <th>Tipo</th>
      <th style="text-align: left">Descrição</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>logical</strong></td>
      <td style="text-align: left">Valor lógico, <code>TRUE</code> ou <code>FALSE</code>. Usado com os operadores lógicos <code>&amp;, |, ==, !=, &gt;, &lt;, &gt;=, &lt;=</code></td>
    </tr>
    <tr>
      <td><strong>integer</strong></td>
      <td style="text-align: left">Valores de números inteiros</td>
    </tr>
    <tr>
      <td><strong>numeric</strong></td>
      <td style="text-align: left">Valores de números decimais. Também representam números inteiros</td>
    </tr>
    <tr>
      <td><strong>character</strong></td>
      <td style="text-align: left">Valores textuais, também conhecidos como string</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h3 id="converses">Conversões</h3>

<p>Existem algumas operações de conversões entre os tipos. São bastante usadas em transformações de campos. Por exemplo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">as.numeric</span><span class="p">(</span><span class="err">“</span><span class="m">20</span><span class="err">”</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 20</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">as.character</span><span class="p">(</span><span class="m">20</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “20”</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">as.integer</span><span class="p">(</span><span class="m">3.14</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 3</code></pre></div></p>

<h3 id="estruturas-bsicas">Estruturas básicas</h3>

<p>Dominar as estruturas de dados do R será fundamental no desenvolvimento das suas análises. Inicialmente, a ideia de estrutura de dados pode parecer um pouco abstrata, mas conhecê-las e saber suas características será útil para você perceber quais são as possibilidades.</p>

<p>A tabela abaixo apresenta um resumo das estruturas básicas. Ela está baseada na explicação que está no livro do <a href="http://adv-r.had.co.nz/Data-structures.html"><em>Advanced R</em></a> do Hadley Wickham (leitura recomendada pra quem deseja aprofundar seus conhecimento em R).</p>

<table>
  <thead>
    <tr>
      <th>Tipo</th>
      <th style="text-align: left">Descrição</th>
      <th>Dimensões</th>
      <th>Homogêneo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>vector</strong></td>
      <td style="text-align: left">Coleção de elementos simples. Todos os elementos precisam ser do mesmo tipo básico de dado</td>
      <td>1</td>
      <td>Sim</td>
    </tr>
    <tr>
      <td><strong>array</strong></td>
      <td style="text-align: left">Coleção que se parece com o vector, mas é multidimensional</td>
      <td>n</td>
      <td>Sim</td>
    </tr>
    <tr>
      <td><strong>matrix</strong></td>
      <td style="text-align: left">Tipo especial de array com duas dimensões</td>
      <td>2</td>
      <td>Sim</td>
    </tr>
    <tr>
      <td><strong>list</strong></td>
      <td style="text-align: left">Objeto complexo com elementos que podem ser de diferentes tipos</td>
      <td>1</td>
      <td>Não</td>
    </tr>
    <tr>
      <td><strong>data.frame</strong></td>
      <td style="text-align: left">Tipo especial de lista onde cada coluna é um vetor de apenas um tipo e todos as colunas têm o mesmo número de registros. É o tipo mais utilizado se trabalhar com dados</td>
      <td>2</td>
      <td>Não</td>
    </tr>
    <tr>
      <td><strong>factor</strong></td>
      <td style="text-align: left">Tipo especial de vector que só contém valores pré definidos (levels) e categóricos (characters). Não é possível adicionar novas categorias sem criação de novos levels</td>
      <td>1</td>
      <td>Não</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>Do que se trata o campo <code>Dimensões</code> na tabela? Na prática, isso afetará como você usará partes desse objeto. Por exemplo, um objeto com duas dimensões tem linhas e colunas. Assim, você usará <code>[ , ]</code> (com vírgula separando linha e coluna, respectivamente) para acessar a dimensão que você deseja selecionar. Já um objeto unidimensional terá seus elementos acessados usando apenas <code>[ ]</code>. A lista, por sua vez, tem seus elementos acessados com <code>[[ ]]</code>.</p>

<p>E o campo <code>Homogêneo</code> da tabela? Trata-se de mais uma características das estruturas de dados. Diz respeito à variedade de tipos básicos que um objeto pode conter. Por exemplo, vetores só aceitam um tipo de dado. Assim, se você atribuir dois tipos diferentes, ele forçará para um único tipo. Listas e data frames aceitam diferentes tipos de dados.</p>

<h3 id="observaes-sobre-listas">Observações sobre listas</h3>

<p>Lista pode causar um pouco de confusão no começo. Daremos alguns exemplos para explicar melhor.</p>

<p>Iremos criar listas com duas bases de dados que já são fornecidas como exemplos no próprio R. Primeiramente, vamos carregar as duas bases de dados:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data</span><span class="p">(</span><span class="err">“</span><span class="n">mtcars</span><span class="err">”</span><span class="p">)</span>
<span class="n">data</span><span class="p">(</span><span class="err">“</span><span class="n">iris</span><span class="err">”</span><span class="p">)</span>
<span class="n">class</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “data.frame”</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">class</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “data.frame”</code></pre></div></p>

<p>Veja que temos dois data frames. Agora, vamos criar um objeto único que irá receber essas duas bases. Além disso, a fim de mostrar a heterogeneidade, iremos incluir um objeto que será um vetor.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span><span class="o">:</span><span class="m">10</span>
<span class="n">lista.teste</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">list</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span> <span class="n">iris</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span></code></pre></div></p>

<p>Faça um teste e digite <code>lista.teste</code> no console para ver o resultado.</p>

<p>E como eu faço pra acessar partes específicas? Como dissemos a lista tem uma pequena diferença, será necessário usar o <code>[[ ]]</code>. Lembre-se que, como a lista é um objeto de dimensão 1, só precisaremos passar o índice que temos interesse. O vetor <code>x</code> é o terceiro elemento. Logo, para acessá-lo podemos fazer o seguinte:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">lista.teste</span><span class="p">[[</span><span class="m">3</span><span class="p">]]</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  [1]  1  2  3  4  5  6  7  8  9 10</code></pre></div></p>

<p>Para terminar essa breve explicação sobre listas, vamos mostrar que cada objeto de uma lista pode ter um nome:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">lista.teste</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">list</span><span class="p">(</span><span class="n">base1</span> <span class="o">=</span> <span class="n">mtcars</span><span class="p">,</span> <span class="n">base2</span> <span class="o">=</span> <span class="n">iris</span><span class="p">,</span> <span class="n">vetor1</span> <span class="o">=</span> <span class="n">x</span><span class="p">)</span></code></pre></div></p>

<p>Dessa forma, você <em>também</em> poderá acessar usando o nome com o auxílio do <code>$</code>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">lista.teste</span><span class="o">$</span><span class="n">vetor1</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  [1]  1  2  3  4  5  6  7  8  9 10</code></pre></div></p>

<p><br /></p>

<h3 id="observaes-sobre-vectors">Observações sobre vectors</h3>

<p>Vectors possuem algumas propriedades muito úteis como <code>length()</code>, <code>typeof()</code> e <code>unique()</code>. Você também poderá usar o <code>length()</code> para saber o tamanho de uma lista.</p>

<h3 id="observaes-sobre-dataframes">Observações sobre data.frames</h3>

<p>As funções <code>nrow()</code> e <code>ncol()</code> podem ser usadas para saber, respectivamente, o número de linhas e colunas de um data.frame (ou de uma matriz).</p>

<p>Data.frames também podem ter o nome das colunas alterados. Veja o exemplo a seguir:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">names</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “Sepal.Length” “Sepal.Width”  “Petal.Length” “Petal.Width” 
## [5] “Species”</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">names</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">campo1</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">campo2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">campo3</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">campo4</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">campo5</span><span class="err">”</span><span class="p">)</span>
<span class="n">head</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   campo1 campo2 campo3 campo4 campo5
## 1    5.1    3.5    1.4    0.2 setosa
## 2    4.9    3.0    1.4    0.2 setosa
## 3    4.7    3.2    1.3    0.2 setosa
## 4    4.6    3.1    1.5    0.2 setosa
## 5    5.0    3.6    1.4    0.2 setosa
## 6    5.4    3.9    1.7    0.4 setosa</code></pre></div></p>

<h2 id="valores-faltantes-missing">Valores Faltantes (Missing)</h2>

<p>O R atribui <code>NA</code> para valores faltantes. Ou seja, se por acaso uma determinada posição de um vetor ou de uma coluna de um data.frame não possui valor algum, o R mostrará <code>NA</code>.</p>

<p>É muito comum lidar com conjuntos de dados que tenham ocorrências de <code>NA</code> em alguns campos. É importante saber o que fazer em casos de <code>NA</code>, e nem sempre a solução será a mesma, vai variar de acordo com as suas necessidades.</p>

<p>Em algumas bases de dados, quem gera o dado atribui valores genéricos como 999 ou até mesmo um “texto vazio” <code>' '</code>. Nesse caso, você provavelmente terá que substituir esses valores “omissos” por <code>NA</code>.</p>

<p>Vamos explicar as funções básicas para começar a lidar com <code>NA</code> no R.</p>

<p>Em primeiro lugar, criaremos um simples data.frame para exemplificar:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.ex</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">data.frame</span><span class="p">(</span><span class="n">col1</span> <span class="o">=</span> <span class="n">letters</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">],</span> <span class="n">col2</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="m">50</span><span class="p">,</span> <span class="n">NA</span><span class="p">))</span>
<span class="n">data.ex</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   col1 col2
## 1    a   10
## 2    b   20
## 3    c   30
## 4    d   NA
## 5    e   50
## 6    f   NA</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">summary</span><span class="p">(</span><span class="n">data.ex</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  col1       col2   &lt;br /&gt;
##  a:1   Min.   :10.0&lt;br /&gt;
##  b:1   1st Qu.:17.5&lt;br /&gt;
##  c:1   Median :25.0&lt;br /&gt;
##  d:1   Mean   :27.5&lt;br /&gt;
##  e:1   3rd Qu.:35.0&lt;br /&gt;
##  f:1   Max.   :50.0&lt;br /&gt;
##        NA’s   :2</code></pre></div></p>

<p>Usamos o <code>letters</code> que é uma lista pré construída no R e que retorna as 26 letras do alfabeto. No caso, usamos só as seis primeiras. Na segunda coluna, colocamos alguns <code>NA</code>’s.</p>

<p>A função <code>summary</code> mostra que existem dois <code>NA</code>’s na <code>col2</code>. Nesse exemplo fica fácil para encontrar onde estão os <code>NA</code>’s e fazer alguma modificação caso deseje, mas considere um caso em que seu data.frame é grande. Você não iria conseguir identificar no olho. Assim, é necessário usar algumas funções. Vamos começar como o <code>is.na()</code>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">is.na</span><span class="p">(</span><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">which</span><span class="p">(</span><span class="n">is.na</span><span class="p">(</span><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 4 6</code></pre></div></p>

<p>O <code>is.na()</code> realiza um teste para saber se cada elemento da variável <code>col2</code> é um missing. Além disso, se usarmos o <code>is.na()</code> dentro da função <code>which()</code> saberemos quais as posições que possuem o <code>NA</code>. Um detalhe importante sobre funções que retornam <code>TRUE</code> ou <code>FALSE</code> como o <code>is.na()</code> é que você pode usar a <code>!</code> para fazer o teste ao contrário. Isto é, se quisermos saber quais não são <code>NA</code>, faremos o seguinte:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">!</span><span class="n">is.na</span><span class="p">(</span><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE</code></pre></div></p>

<p>Notou que a função retornou o contrário de <code>is.na(data.ex$col2)</code>?</p>

<p>Agora iremos introduzir a função <code>complete.cases()</code>. Bastante utilizada, essa função retorna <code>TRUE</code> para as linhas em que todas as colunas possuem valores válidos e <code>FALSE</code> para as linhas em que em alguma coluna existe um <code>NA</code>. Ou seja, essa função diz quais são as linhas (amostras) completas em todas suas características (campos).</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">complete.cases</span><span class="p">(</span><span class="n">data.ex</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">!</span><span class="n">complete.cases</span><span class="p">(</span><span class="n">data.ex</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE</code></pre></div></p>

<p>Podemos usar o retorno dessa função para selecionar linhas do nosso data.frame:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.ex</span><span class="p">[</span><span class="o">!</span><span class="n">complete.cases</span><span class="p">(</span><span class="n">data.ex</span><span class="p">),]</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   col1 col2
## 4    d   NA
## 6    f   NA</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.ex</span><span class="p">[</span><span class="n">complete.cases</span><span class="p">(</span><span class="n">data.ex</span><span class="p">),]</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   col1 col2
## 1    a   10
## 2    b   20
## 3    c   30
## 5    e   50</code></pre></div></p>

<p>Você poderia usar a função <code>na.omit()</code> para obter o mesmo resultado da seleção de linhas com o <code>complete.cases()</code>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">na.omit</span><span class="p">(</span><span class="n">data.ex</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   col1 col2
## 1    a   10
## 2    b   20
## 3    c   30
## 5    e   50</code></pre></div></p>

<p>Por fim, iremos imputar a média da <code>col2</code> nas linhas em que há <code>NA</code>. Para isso, usaremos o <code>ifelse()</code> que tratamos na <a href="/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6/">parte 6</a> e o <code>is.na()</code>, além da função <code>mean()</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Calcular a média da col2</span>
<span class="n">media.col2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">mean</span><span class="p">(</span><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">,</span> <span class="n">na.rm</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span>
<span class="n">media.col2</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 27.5</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">[</span><span class="n">is.na</span><span class="p">(</span><span class="n">data.ex</span><span class="o">$</span><span class="n">col2</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">media.col2</span>
<span class="n">data.ex</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   col1 col2
## 1    a 10.0
## 2    b 20.0
## 3    c 30.0
## 4    d 27.5
## 5    e 50.0
## 6    f 27.5</code></pre></div></p>

<p>Note que na função <code>mean()</code> usamos o argumento <code>na.rm</code>. Ele significa “remover <code>NA</code>”, o que é necessário nesse cálculo, pois se os <code>NA</code>’s não forem retirados, a média será <code>NA</code> também.</p>

<p>Imputar dados em casos de <code>NA</code> é uma das várias estratégias para lidar com ocorrência de missing no conjunto dos dados.</p>

<h2 id="exemplo-final-titanic">Exemplo final: Titanic</h2>

<p>Vamos dar um exemplo final de algumas transformações e manipulações de dados na tentativa de resumir todos os aspectos tratados no kit de sobrevivência em R.</p>

<p>Escolhemos a base de dados dos passageiros do Titanic! É uma base muito utilizada como tutorial de machine learning onde o objetivo é criar um modelo para prever os sobreviventes do acidente. Se você pretende aprender machine learning, certamente vai esbarrar (ou já esbarrou) com essa base de dados. Inclusive há uma série de <a href="https://www.kaggle.com/c/titanic">tutoriais de machine learning com essa base no Kaggle</a>.</p>

<p>Nosso objetivo não é criar nenhum modelo nem ensinar a fazer isso, vamos apenas explorar a base, manipular, transformar e criar algumas variáveis. Teremos muitos posts em breve sobre modelos preditivos e machine learning!</p>

<p>Primeiro criamos um novo script, lembre-se sempre de salvar o seu trabalho para não perder nada. Em seguida vamos limpar o ambiente de memória para começar.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rm</span><span class="p">(</span><span class="n">list</span> <span class="o">=</span> <span class="n">ls</span><span class="p">())</span></code></pre></div></p>

<p>Vamos instalar e carregar o pacote R que disponibiliza os dados.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="err">‘</span><span class="n">titanic</span><span class="err">’</span><span class="p">)</span>
<span class="n">library</span><span class="p">(</span><span class="n">titanic</span><span class="p">)</span></code></pre></div></p>

<p>O data frame que iremos usar já estará carregado na memória e se chama <code>titanic_train</code>. Trata-se da base de treinamento usada para treinar modelos. Vamos dar uma olhada. As bases de treinamento já vem com a resposta na variável que você quer descobrir na base de teste. Nesse caso os modelos que usam essa base são treinados para descobrir a variável <code>Survived</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">str</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## ‘data.frame’:	891 obs. of  12 variables:
##  $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 …
##  $ Survived   : int  0 1 1 1 0 0 0 0 1 1 …
##  $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 …
##  $ Name       : chr  “Braund, Mr. Owen Harris” “Cumings, Mrs. John Bradley (Florence Briggs Thayer)” “Heikkinen, Miss. Laina” “Futrelle, Mrs. Jacques Heath (Lily May Peel)” …
##  $ Sex        : chr  “male” “female” “female” “female” …
##  $ Age        : num  22 38 26 35 35 NA 54 2 27 14 …
##  $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 …
##  $ Parch      : int  0 0 0 0 0 0 0 1 2 0 …
##  $ Ticket     : chr  “A/5 21171” “PC 17599” “STON/O2. 3101282” “113803” …
##  $ Fare       : num  7.25 71.28 7.92 53.1 8.05 …
##  $ Cabin      : chr  “” “C85” “” “C123” …
##  $ Embarked   : chr  “S” “C” “S” “S” …</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   PassengerId Survived Pclass
## 1           1        0      3
## 2           2        1      1
## 3           3        1      3
## 4           4        1      1
## 5           5        0      3
## 6           6        0      3
##                                                  Name    Sex Age
## 1                             Braund, Mr. Owen Harris   male  22
## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38
## 3                              Heikkinen, Miss. Laina female  26
## 4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35
## 5                            Allen, Mr. William Henry   male  35
## 6                                    Moran, Mr. James   male  NA
##   SibSp Parch           Ticket    Fare Cabin Embarked
## 1     1     0        A/5 21171  7.2500              S
## 2     1     0         PC 17599 71.2833   C85        C
## 3     0     0 STON/O2. 3101282  7.9250              S
## 4     1     0           113803 53.1000  C123        S
## 5     0     0           373450  8.0500              S
## 6     0     0           330877  8.4583              Q</code></pre></div></p>

<p>Repare que cada linha representa um passageiro e cada campo representa uma característica desse passageiro. As variáveis (campos) estão em inglês e talvez não sejam tão óbvias. Segue explicação de cada uma:</p>

<table>
  <thead>
    <tr>
      <th>Nome do campo</th>
      <th style="text-align: left">Descrição do campo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Survived</strong></td>
      <td style="text-align: left">Passageiro sobrevivente (1) ou morto (0)</td>
    </tr>
    <tr>
      <td><strong>Pclass</strong></td>
      <td style="text-align: left">Classe do passageiro</td>
    </tr>
    <tr>
      <td><strong>Name</strong></td>
      <td style="text-align: left">Nome do passageiro</td>
    </tr>
    <tr>
      <td><strong>Sex</strong></td>
      <td style="text-align: left">Gênero do passageiro (male ou female)</td>
    </tr>
    <tr>
      <td><strong>Age</strong></td>
      <td style="text-align: left">Idade do passageiro</td>
    </tr>
    <tr>
      <td><strong>SibSp</strong></td>
      <td style="text-align: left">Número de irmãos ou cônjuges a bordo</td>
    </tr>
    <tr>
      <td><strong>Parch</strong></td>
      <td style="text-align: left">Número de pais ou filhos a bordo</td>
    </tr>
    <tr>
      <td><strong>Ticket</strong></td>
      <td style="text-align: left">Número do tíquete</td>
    </tr>
    <tr>
      <td><strong>Fare</strong></td>
      <td style="text-align: left">Preço do tíquete</td>
    </tr>
    <tr>
      <td><strong>Cabin</strong></td>
      <td style="text-align: left">Cabine</td>
    </tr>
    <tr>
      <td><strong>Embarked</strong></td>
      <td style="text-align: left">Portão de embarque</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>Vamos traduzir os nomes dos campos para facilitar o entendimento. Para isso usaremos a função <code>names()</code></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">names</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  [1] “PassengerId” “Survived”    “Pclass”      “Name”     &lt;br /&gt;
##  [5] “Sex”         “Age”         “SibSp”       “Parch”    &lt;br /&gt;
##  [9] “Ticket”      “Fare”        “Cabin”       “Embarked”</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">names</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">id_passageiro</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">sobrevivente</span><span class="err">’</span><span class="p">,</span> 
			<span class="err">‘</span><span class="n">classe</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">nome</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">sexo</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">idade</span><span class="err">’</span><span class="p">,</span>
			<span class="err">‘</span><span class="n">irmaos_conjuge</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">pais_filhos</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">numero_ticket</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">valor_ticket</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">cabine</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">porta_embarque</span><span class="err">’</span><span class="p">)</span></code></pre></div></p>

<p>Como o objetivo dessa base de dados é treinar um modelo para descobrir se um passageiro vai sobreviver ou não, vamos manipular e criar variáveis para tentar ajudar a atingir esse objetivo. O ideal é fazer uma bela análise exploratória dos dados, com auxílio de gráficos e estatística básica, mas nosso foco agora é apenas na transformação de dados, portanto, tentaremos um pouco de intuição e criatividade para criar variáveis possivelmente úteis.</p>

<p>Vamos começar com a variável <code>idade</code>. Há um comportamento interessante nessa variável: missings!</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">unique</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  [1] 22.00 38.00 26.00 35.00    NA 54.00  2.00 27.00 14.00  4.00 58.00
## [12] 20.00 39.00 55.00 31.00 34.00 15.00 28.00  8.00 19.00 40.00 66.00
## [23] 42.00 21.00 18.00  3.00  7.00 49.00 29.00 65.00 28.50  5.00 11.00
## [34] 45.00 17.00 32.00 16.00 25.00  0.83 30.00 33.00 23.00 24.00 46.00
## [45] 59.00 71.00 37.00 47.00 14.50 70.50 32.50 12.00  9.00 36.50 51.00
## [56] 55.50 40.50 44.00  1.00 61.00 56.00 50.00 36.00 45.50 20.50 62.00
## [67] 41.00 52.00 63.00 23.50  0.92 43.00 60.00 10.00 64.00 13.00 48.00
## [78]  0.75 53.00 57.00 80.00 70.00 24.50  6.00  0.67 30.50  0.42 34.50
## [89] 74.00</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sum</span><span class="p">(</span><span class="n">is.na</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span><span class="p">))</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 177</code></pre></div></p>

<p>Usando <code>sum()</code> junto com <code>is.na()</code> conseguimos contar a quantidade total de <code>NA</code> na variável.</p>

<p>Nesse nosso caso específico, vamos interpretar <code>NA</code> como se o passageiro tivesse a idade desconhecida, seja lá qual for o motivo. Dependendo do algoritmo de machine learning que será aplicado a esses dados, a presença de <code>NA</code> não é bem vinda. Portanto, precisamos lidar com os <code>NA</code>s dessa variável.</p>

<p>A título de exemplificação, vamos adicionar a média geral das idades quando não soubermos a idade do passageiro. (Veja, essa nem sempre é uma boa estratégia para imputação de dados. Vamos usá-la agora apenas por ser bem simples).</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">media</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">mean</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span><span class="p">,</span> <span class="n">na.rm</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span>
<span class="n">media</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 29.69912</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">is.na</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span><span class="p">),</span> <span class="n">round</span><span class="p">(</span><span class="n">media</span><span class="p">),</span> <span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span><span class="p">)</span></code></pre></div></p>

<p>Calculamos a média desconsiderando ocorrências de <code>NA</code>, em seguida atribuímos a média (arredondada) às ocorrências de <code>NA</code>.</p>

<p>Agora todos os passageiros tem idade, alguns a idade correta, outros uma idade atribuída. Vamos criar agora uma classificação de <code>jovem</code>, <code>adulto</code> ou <code>idoso</code> para essa variável.</p>

<p>Pode ser que isso ajude algum algoritmo a prever melhor quem vive ou quem morre no acidente, pois, intuitivamente, talvez jovens sejam imaturos fiquem mais assustados, talvez idosos tenham menos habilidade de fuga e adultos talvez lidem melhor com situações de emergência.</p>

<p>Sendo assim, até 20 anos chamaremos de <code>jovem</code>, de 21 a 54 chamaremos de <code>adulto</code>, e acima de 55 chamaremos de <code>idoso</code>. Vamos chamar essa variável de <code>faixa_etaria</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">titanic_train</span><span class="o">$</span><span class="n">faixa_etaria</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">20</span><span class="p">,</span> <span class="err">‘</span><span class="n">jovem</span><span class="err">’</span><span class="p">,</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">21</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">titanic_train</span><span class="o">$</span><span class="n">idade</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">55</span><span class="p">,</span> <span class="err">‘</span><span class="n">adulto</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">idoso</span><span class="err">’</span><span class="p">))</span>
<span class="n">head</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">[,</span><span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">idade</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">faixa_etaria</span><span class="err">’</span><span class="p">)],</span> <span class="m">15</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    idade faixa_etaria
## 1     22       adulto
## 2     38       adulto
## 3     26       adulto
## 4     35       adulto
## 5     35       adulto
## 6     30       adulto
## 7     54       adulto
## 8      2        jovem
## 9     27       adulto
## 10    14        jovem
## 11     4        jovem
## 12    58        idoso
## 13    20        jovem
## 14    39       adulto
## 15    14        jovem</code></pre></div></p>

<p>Uma outra variável que pode ser interessante para ajudar modelos preditivos pode ser o total de parentes. Será que quanto mais parentes o passageiro tiver, mais ele se preocupe em salvar a vida dos seus entes queridos, botando a sua vida em risco? Ou será que a prioridade “mulheres e crianças primeiro” ajudou quem tinha família a sobreviver?</p>

<p>Há uma variável para irmãos e cônjuges, e outra para crianças ou pais. Vamos somá-las e criar o <code>total_parentes</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">titanic_train</span><span class="o">$</span><span class="n">total_parentes</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">titanic_train</span><span class="o">$</span><span class="n">irmaos_conjuge</span> <span class="o">+</span> <span class="n">titanic_train</span><span class="o">$</span><span class="n">pais_filhos</span></code></pre></div></p>

<p>Para complementar essa ideia, vamos tentar distinguir quem tinha família e quem não tinha, criando uma variável categórica simplesmente indicando se o passageiro tem família ou não:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">titanic_train</span><span class="o">$</span><span class="n">familia</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">total_parentes</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span><span class="p">,</span> <span class="err">‘</span><span class="n">Sim</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Nao</span><span class="err">’</span><span class="p">)</span></code></pre></div></p>

<p>Seguindo com as transformações, o título do passageiro pode dizer algo sobre ele. Vamos tentar isolar o título em uma variável para explicitar isso aos possíveis algoritmos:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">titanic_train</span><span class="o">$</span><span class="n">titulo</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">lapply</span><span class="p">(</span><span class="n">strsplit</span><span class="p">(</span><span class="n">titanic_train</span><span class="o">$</span><span class="n">nome</span><span class="p">,</span> <span class="err">‘</span><span class="p">[,</span><span class="err">.</span><span class="p">]</span><span class="err">’</span><span class="p">),</span> <span class="err">“</span><span class="p">[</span><span class="err">”</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
<span class="n">head</span><span class="p">(</span><span class="n">titanic_train</span><span class="p">[,</span><span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">nome</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">titulo</span><span class="err">’</span><span class="p">)],</span> <span class="m">15</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##                                                   nome  titulo
## 1                              Braund, Mr. Owen Harris      Mr
## 2  Cumings, Mrs. John Bradley (Florence Briggs Thayer)     Mrs
## 3                               Heikkinen, Miss. Laina    Miss
## 4         Futrelle, Mrs. Jacques Heath (Lily May Peel)     Mrs
## 5                             Allen, Mr. William Henry      Mr
## 6                                     Moran, Mr. James      Mr
## 7                              McCarthy, Mr. Timothy J      Mr
## 8                       Palsson, Master. Gosta Leonard  Master
## 9    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)     Mrs
## 10                 Nasser, Mrs. Nicholas (Adele Achem)     Mrs
## 11                     Sandstrom, Miss. Marguerite Rut    Miss
## 12                            Bonnell, Miss. Elizabeth    Miss
## 13                      Saundercock, Mr. William Henry      Mr
## 14                         Andersson, Mr. Anders Johan      Mr
## 15                Vestrom, Miss. Hulda Amanda Adolfina    Miss</code></pre></div></p>

<p>O comando usado talvez seja um pouco avançado, mas vamos tentar explicar por partes. Primeiramente usamos o <code>strsplit()</code>, uma função que lida com caracteres e divide uma string baseado numa marcação. Nesse caso, estamos dividindo o nome do passageiro em dois pontos: vírgula <code>,</code> e ponto <code>.</code>, que é justamente o padrão textual que separa o título no nome.</p>

<p>O resultado do <code>strsplit()</code> é uma lista com as partes da separação. Para acessar exatamente o segundo elemento da lista, que é onde está o título, usamos o <code>lapply()</code>, uma função da família <code>apply</code>, que executa um comando repetidamente ao longo de uma estrutura (coluna, array, listas, matrizes, etc…). O efeito prático das funções da família <code>apply</code> se assemelha muito à loops.</p>

<p>Dominar a família <code>apply</code> pode ser muito interessante para se tornar um bom analista de dados. Certamente faremos uma sequência de posts explicando detalhadamente todas as funções da família <code>apply</code>, aguarde!</p>

<h2 id="concluso">Conclusão</h2>

<p>E é isso pessoal. Chegamos ao fim da sequência. Esperamos que tenha gostado e aprendido o kit básico de sobrevivência em R. Daqui em diante os posts serão intermediários e avançados, tratando de questões mais profundas como junção de dados, visualização de dados, análise exploratória, estatística, machine learning.</p>

<h2 id="referncias">Referências</h2>

<ul>
  <li><a href="http://www.uni-kiel.de/psychologie/rexrepos/posts/missingData.html">Deal with missing data</a></li>
  <li><a href="http://www.statmethods.net/input/missingdata.html">Missing data</a></li>
  <li><a href="https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/">A brief introduction to “apply” in R</a></li>
  <li><a href="https://www.datacamp.com/community/tutorials/r-tutorial-apply-family">R tutorial on the Apply family of functions</a></li>
</ul>

<h2 id="demais-posts-da-sequncia">Demais posts da sequência:</h2>

<ul>
  <li><a href="/blog/2016/03/23/kit-de-sobrevivencia-em-r-parte-1">Kit de sobrevivência em R - Parte 1: Visão Geral e Instalação</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-2">Kit de sobrevivência em R - Parte 2: Operações, Variáveis e Funções</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-3">Kit de sobrevivência em R - Parte 3: Pacotes</a></li>
  <li><a href="/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4">Kit de sobrevivência em R - Parte 4: Carregando Dados</a></li>
  <li><a href="/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5">Kit de sobrevivência em R - Parte 5: Tipos de Dados e Transformações</a></li>
  <li><a href="/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6">Kit de sobrevivência em R - Parte 6: Estruturas de Controle</a></li>
  <li><a href="/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7">Kit de sobrevivência em R - Parte 7: Avançando e Aprofundando</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kit de sobrevivência em R - Parte 6: Estruturas de Controle]]></title>
    <link href="http://fulljoin.com.br/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6/"/>
    <updated>2016-05-01T20:04:00-03:00</updated>
    <id>http://fulljoin.com.br/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6</id>
    <content type="html"><![CDATA[<p>No último post, você aprendeu um pouco sobre os tipos de dados e como realizar algumas transformações. Neste post, trataremos um pouco sobre estruturas de controles (for, if, else, while etc.). Estruturas de controles serão bastante usadas durante o processo de análise de dados, sendo importante que você domine esse tópico.</p>

<!-- More -->

<p>Para exemplificar, utilizaremos os dados de taxas de desemprego que estão disponíveis <a href="https://www.dropbox.com/s/4tedgnkd85c5q5s/desemprego_uf_pnad.zip?dl=0">neste link</a>.</p>

<p>Antes de mais nada, carregue os dados:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">desemprego.uf</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.table</span><span class="p">(</span><span class="err">“</span><span class="n">desemprego_uf_espaco.txt</span><span class="err">”</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="err">“</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="n">stringsAsFactors</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">)</span></code></pre></div>
# Intuição sobre Loops</p>

<p>Trata-se de um dos conceitos mais importantes de qualquer linguagem de programação. Em R não é diferente. Loops (ou laços) repetem uma sequência de comando quantas vezes você desejar, ou até que uma condição aconteça, variando alguns aspectos entre uma repetição e outra.</p>

<p>Supondo que você queira testar uma simples expressão para 5 valores diferentes, por exemplo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">2</span>
<span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">x</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 14</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">3</span>
<span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">x</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 45</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">4</span>
<span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">x</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 284</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">5</span>
<span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">x</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 3165</code></pre></div></p>

<p>Repare que você executou 5 vezes o mesmo comando alterando apenas o valor da variável <code>x</code>. 5 ainda parece uma quantidade pequena, mas vamos supor que você gostaria de testar essa expressão para 1000 valores? Você a escreveria 1000 vezes? Apesar de você poder calcular todos esses valores a partir de um vetor <code>x &lt;- 2:5</code>, em uma situação específica você pode ser ver obrigado a usar um loop pra não ter que ficar fazendo repetições cansativas.</p>

<h2 id="for">for()</h2>

<p>O <code>for()</code> é usado para realizar uma série de ordens para uma determinada sequência ou índices. Aplicando ao exemplo acima, temos a seguinte sintaxe:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">x</span> <span class="k">in</span> <span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="m">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">x</span><span class="p">)</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 14
## [1] 45
## [1] 284
## [1] 3165</code></pre></div>
Repare, você escreveu bem menos e o resultado foi idêntico: “para cada <code>x</code> igual a cada item na sequência <code>2:5</code>, execute <code>print(x + x*2 + x^2 + x^x)</code>”. O <code>for()</code> irá repetir todas as instruções dentro das chaves <code>{ }</code> para cada elemento da sua sequência (vetor).</p>

<p>Você também pode passar números que poderão ser usados como índices.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">){</span>
  <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 1
## [1] 4
## [1] 5
## [1] 6
## [1] 10</code></pre></div></p>

<p>Vamos a um exemplo mais útil que deixa mais claro como o <code>for()</code> funciona. Suponha que você necessita gerar um único plot com quatro gráficos, um para cada trimestre de 2015, da taxa de desemprego por unidade da federação.</p>

<p>Para facilitar, iremos criar um novo data.frame em que estejam selecionadas somente as linhas em que a variável ano é igual a 2015:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">desemprego.uf.2015</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">desemprego.uf</span><span class="p">[</span><span class="n">desemprego.uf</span><span class="o">$</span><span class="n">Ano</span> <span class="o">==</span> <span class="m">2015</span><span class="p">,]</span></code></pre></div></p>

<p>Perceba que no código base do R, para selecionar as linhas de um data.frame, você utiliza o <code>[ , ]</code>. A vírgula divide as duas dimensões do data.frame. Assim, se o desejo é selecionar linhas, são utilizadas condições antes da vírgula. Para selecionar colunas, serão necessários códigos após a vírgula. Funciona de maneira similar a uma matriz.</p>

<p>No entanto, esta não é a única maneira de realizar esse filtro nos dados. Por exemplo, você poderia obter o mesmo resultado usando a função <code>subset()</code>. Dê uma olhadinha no help.</p>

<p>Além disso, iremos criar um vetor com os trimestres que serão usados como base para realização do loop.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Selecionar valores únicos da coluna Trimestre</span>
<span class="n">trimestre</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">unique</span><span class="p">(</span><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Trimestre</span><span class="p">)</span>
<span class="n">trimestre</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] jan-fev-mar abr-mai-jun jul-ago-set out-nov-dez
## Levels: abr-mai-jun jan-fev-mar jul-ago-set out-nov-dez</code></pre></div></p>

<p>Vamos treinar o <code>for()</code> exibindo todos os valores da variável <code>trimestre</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">trimestre</span><span class="p">){</span>
  <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “jan-fev-mar”
## [1] “abr-mai-jun”
## [1] “jul-ago-set”
## [1] “out-nov-dez”</code></pre></div></p>

<p>Agora vamos definir alguns parâmetros do plot. Aqui usaremos o recurso base do R para geração dos gráficos. Atualmente, uma boa parte dos usuários (inclusive a gente) utiliza o <a href="http://docs.ggplot2.org/current/">ggplot2</a>.</p>

<p>Com um pouco de criatividade e com uma boa base de dados, você poderá criar gráficos como o que está <a href="https://medium.com/airbnb-engineering/using-r-packages-and-education-to-scale-data-science-at-airbnb-906faa58e12d#.z39ukskpb">neste post</a> do Airbnb. Não entraremos em detalhes sobre gráficos agora, mas prometemos uma sequência de posts ensinando todos os principais aspectos da confecção de gráficos, aguarde!</p>

<p>Os parâmetros do plot serão definidos usando a função <code>par()</code>. Utilize o <code>?par</code> para ver mais detalhes sobre esta função e as opções disponíveis.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">),</span> <span class="c1"># O plot terá 2 linhas e 2 colunas</span>
    <span class="n">mar</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">8</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> <span class="c1"># margens inferior, esquerda, superior, direita</span>
    <span class="n">las</span> <span class="o">=</span> <span class="m">2</span><span class="p">)</span> <span class="c1"># rótulos perpendicular aos eixos</span></code></pre></div></p>

<p>O código abaixo traz o loop. Temos 4 operações dentro do loop:</p>

<ul>
  <li>Criar o data.frame <code>dados.tmp</code> a partir de um filtro no data.frame <code>desemprego.uf.2015</code>. Queremos somente as linhas em que o Trimestre é igual a <code>i</code>.</li>
  <li>Usando a função <code>order()</code>, ordenar as linhas dos <code>dados.tmp</code> de forma decrescente pelo valor da taxa de desemprego. Vide <code>?order()</code>.</li>
  <li>Criar um objeto de texto que trará o título de cada gráfico. Usamos a função <code>paste()</code> que tem o papel de concatenar o que for passado como argumento. Usamos espaço como separador, mas você pode passar qualquer separador entre as aspas. Esta função tem mais um parâmetro: <code>collapse</code>. Não precisaremos desse parâmetro aqui, mas dê uma olhada no help para ver alguns exemplos. Note também que ele já tem um valor padrão <code>NULL</code>.</li>
  <li>Por fim, usamos o <code>barplot()</code> para criar o gráfico de barra. Vide <code>?barplot()</code>.</li>
</ul>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">trimestre</span><span class="p">){</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">desemprego.uf.2015</span><span class="p">[</span><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="n">i</span><span class="p">,</span>
                                  <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">UF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Taxa_Desemprego</span><span class="err">’</span><span class="p">)]</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">dados.tmp</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">decreasing</span> <span class="o">=</span> <span class="n">T</span><span class="p">),]</span>
  <span class="c1"># Cria o título do plot</span>
  <span class="n">title</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">paste</span><span class="p">(</span><span class="err">“</span><span class="n">Taxa</span> <span class="n">de</span> <span class="n">Desemprego</span> <span class="m">2015</span><span class="o">:</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="p">)</span>
  <span class="c1"># Gera o gráfico de barras</span>
  <span class="n">barplot</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">names.arg</span> <span class="o">=</span> <span class="n">dados.tmp</span><span class="o">$</span><span class="n">UF</span><span class="p">,</span>
          <span class="n">col</span> <span class="o">=</span> <span class="err">“</span><span class="n">dodgerblue</span><span class="err">”</span><span class="p">,</span> <span class="n">border</span> <span class="o">=</span> <span class="n">NA</span><span class="p">,</span> <span class="n">main</span> <span class="o">=</span> <span class="n">title</span><span class="p">,</span>
          <span class="n">ylab</span><span class="o">=</span><span class="err">”</span><span class="o">%</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></div></p>

<p>Veja o resultado:</p>

<p><img src="/figures/source/2016-05-01-kit-de-sobrevivencia-em-r-parte-6/unnamed-chunk-11-1.png" alt="plot of chunk unnamed-chunk-11" /></p>

<p>O gif abaixo mostra como o R vai inserindo gráfico a gráfico. Adicionei o comando <code>Sys.sleep()</code> para que a execução fosse suspensa durante 1,5 segundo para ficar mais claro a criação de cada gráfico e ter a sensação do loop criando um por um (na realidade isso acontece quase instantaneamente!).</p>

<p><img src="/images/forloop.gif" alt="alt Usando o for" title="Usando o for" /></p>

<h2 id="if-e-else">if e else</h2>

<p>Outro clássico conceito de programação que você usará muito é o if e else. É uma estrutura condicional, que usa os operadores lógicos apresentados <a href="/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5/">no post anterior</a>. Se a condição do <code>if()</code> for verdadeira, executa os comandos dentro das chaves <code>{ }</code>, se for falsa, executa os comando da chave do <code>else { }</code></p>

<p>Para exemplificar o uso do if e else, vamos continuar com o exemplo anterior, mas desta vez queremos que as barras para o trimestre <code>out-nov-dez</code> sejam vermelhas. Dessa forma, usaremos os controles if e else. A ideia é realizar um teste sobre <code>i</code> que assume um valor do vetor <code>trimestre</code>. Assim, se <code>i</code> for igual a <code>out-nov-dez</code>, a cor será ver vermelha (<code>col = red</code>), caso contrário utilizaremos o azul (<code>col = dodgerblue</code>).</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">),</span> <span class="c1"># O plot terá 2 linas e 2 colunas</span>
    <span class="n">mar</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> <span class="c1"># margens inferior, esquerda, superior, direita</span>
    <span class="n">las</span> <span class="o">=</span> <span class="m">2</span><span class="p">)</span> <span class="c1"># rótulos perpendicular aos eixos</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">trimestre</span><span class="p">){</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">desemprego.uf.2015</span><span class="p">[</span><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="n">i</span><span class="p">,</span>
                                  <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">UF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Taxa_Desemprego</span><span class="err">’</span><span class="p">)]</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">dados.tmp</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">decreasing</span> <span class="o">=</span> <span class="n">T</span><span class="p">),]</span>
  <span class="n">title</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">paste</span><span class="p">(</span><span class="err">“</span><span class="n">Taxa</span> <span class="n">de</span> <span class="n">Desemprego</span> <span class="m">2015</span><span class="o">:</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="err">‘</span><span class="n">out</span><span class="o">-</span><span class="n">nov</span><span class="o">-</span><span class="n">dez</span><span class="err">’</span><span class="p">){</span>
    <span class="n">barplot</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">names.arg</span> <span class="o">=</span> <span class="n">dados.tmp</span><span class="o">$</span><span class="n">UF</span><span class="p">,</span>
          <span class="n">col</span> <span class="o">=</span> <span class="err">“</span><span class="n">red</span><span class="err">”</span><span class="p">,</span> <span class="n">border</span> <span class="o">=</span> <span class="n">NA</span><span class="p">,</span> <span class="n">main</span> <span class="o">=</span> <span class="n">title</span><span class="p">,</span>
          <span class="n">ylab</span><span class="o">=</span><span class="err">”</span><span class="o">%</span><span class="err">”</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
     <span class="n">barplot</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">names.arg</span> <span class="o">=</span> <span class="n">dados.tmp</span><span class="o">$</span><span class="n">UF</span><span class="p">,</span>
          <span class="n">col</span> <span class="o">=</span> <span class="err">“</span><span class="n">dodgerblue</span><span class="err">”</span><span class="p">,</span> <span class="n">border</span> <span class="o">=</span> <span class="n">NA</span><span class="p">,</span> <span class="n">main</span> <span class="o">=</span> <span class="n">title</span><span class="p">,</span>
          <span class="n">ylab</span><span class="o">=</span><span class="err">”</span><span class="o">%</span><span class="err">”</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p><img src="/figures/source/2016-05-01-kit-de-sobrevivencia-em-r-parte-6/unnamed-chunk-12-1.png" alt="plot of chunk unnamed-chunk-12" /></p>

<p>Podemos reescrever o código acima com o comando <code>ifelse()</code> e obter o mesmo resultado (veja <code>?ifelse()</code>). Para isso, iremos usar o comando <code>ifelse()</code> no argumento <code>col</code>. O primeiro argumento dessa função é o teste que você deseja realizar (saber se o trimestre é ou não é igual a <code>out-nov-dez</code>), o segundo é o valor desejado caso seja verdade e o último é o valor a ser retornado caso a condição não seja satisfeita.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">),</span> <span class="c1"># O plot terá 2 linas e 2 colunas</span>
    <span class="n">mar</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> <span class="c1"># margens inferior, esquerda, superior, direita</span>
    <span class="n">las</span> <span class="o">=</span> <span class="m">2</span><span class="p">)</span> <span class="c1"># rótulos perpendicular aos eixos</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">trimestre</span><span class="p">){</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">desemprego.uf.2015</span><span class="p">[</span><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="n">i</span><span class="p">,</span>
                                  <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">UF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Taxa_Desemprego</span><span class="err">’</span><span class="p">)]</span>
  <span class="n">dados.tmp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">dados.tmp</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">decreasing</span> <span class="o">=</span> <span class="n">T</span><span class="p">),]</span>
  <span class="n">title</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">paste</span><span class="p">(</span><span class="err">“</span><span class="n">Taxa</span> <span class="n">de</span> <span class="n">Desemprego</span> <span class="m">2015</span><span class="o">:</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="p">)</span>
  <span class="n">barplot</span><span class="p">(</span><span class="n">dados.tmp</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">,</span> <span class="n">names.arg</span> <span class="o">=</span> <span class="n">dados.tmp</span><span class="o">$</span><span class="n">UF</span><span class="p">,</span>
          <span class="n">col</span> <span class="o">=</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="err">‘</span><span class="n">out</span><span class="o">-</span><span class="n">nov</span><span class="o">-</span><span class="n">dez</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">red</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">dodgerblue</span><span class="err">’</span><span class="p">),</span>
          <span class="n">border</span> <span class="o">=</span> <span class="n">NA</span><span class="p">,</span> <span class="n">main</span> <span class="o">=</span> <span class="n">title</span><span class="p">,</span>
          <span class="n">ylab</span><span class="o">=</span><span class="err">”</span><span class="o">%</span><span class="err">”</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p><img src="/figures/source/2016-05-01-kit-de-sobrevivencia-em-r-parte-6/unnamed-chunk-13-1.png" alt="plot of chunk unnamed-chunk-13" /></p>

<p>O <code>ifelse()</code> tem uma característica importante. Enquanto o <code>if()</code> aceita apenas um único teste (comprimento um), o <code>ifelse</code> pode receber um vetor para testes e aplicar as condições para este conjunto de teste. Para ficar mais claro veja o exemplo abaixo.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Maior.que.9</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">ifelse</span><span class="p">(</span><span class="n">desemprego.uf.2015</span><span class="o">$</span><span class="n">Taxa_Desemprego</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">9</span><span class="p">,</span>
                                         <span class="err">“</span><span class="n">Maior</span> <span class="n">que</span> <span class="m">9</span><span class="err">”</span><span class="p">,</span>
                                         <span class="err">“</span><span class="n">Menor</span> <span class="n">ou</span> <span class="n">igual</span> <span class="n">a</span> <span class="m">9</span><span class="err">”</span><span class="p">)</span>
<span class="n">head</span><span class="p">(</span><span class="n">desemprego.uf.2015</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##     Ano   Trimestre       UF Taxa_Desemprego        Maior.que.9
## 13 2015 jan-fev-mar Rondônia           4.396 Menor ou igual a 9
## 14 2015 abr-mai-jun Rondônia           4.919 Menor ou igual a 9
## 15 2015 jul-ago-set Rondônia           6.679 Menor ou igual a 9
## 16 2015 out-nov-dez Rondônia           6.276 Menor ou igual a 9
## 29 2015 jan-fev-mar     Acre           8.722 Menor ou igual a 9
## 30 2015 abr-mai-jun     Acre           8.723 Menor ou igual a 9
## 31 2015 jul-ago-set     Acre           8.759 Menor ou igual a 9
## 32 2015 out-nov-dez     Acre           7.588 Menor ou igual a 9
## 45 2015 jan-fev-mar Amazonas           9.358        Maior que 9
## 46 2015 abr-mai-jun Amazonas           9.457        Maior que 9</code></pre></div></p>

<h2 id="while-repeat-break-next">while, repeat, break, next</h2>

<p>Além do <code>for()</code>, temos também outras estruturas de loop que funcionam de maneira semelhante, mudando somente a condição para execução das repetições.</p>

<p>O <code>while()</code> é uma estrutura de controle utilizada para realizar um loop enquanto uma condição for satisfeita. Aqui realizaremos um loop simples somente para demonstrar o funcionamento do <code>while()</code>. Será criado um objeto <code>i</code> igual a 1 e iremos mostrá-lo no console enquanto for menor ou igual a 5. A cada iteração será adicionado 1 ao valor de <code>i</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span>
<span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">5</span><span class="p">){</span>
  <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="m">1</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5</code></pre></div></p>

<p>Como você notou no exemplo do <code>if</code> e <code>else</code>, o R permite que um loop seja elaborado com várias estruturas de controle. Usaremos isto para exemplificar o funcionamento do <code>repeat</code> e do <code>break</code>.</p>

<p>O <code>repeat</code> realiza as operações que estão entre <code>{ }</code> indefinidamente. Obviamente, não iremos querer executar nada para sempre, iremos querer que o loop termine caso alguma coisa aconteça. Dessa forma, temos que criar uma condição para que ele pare e uma instrução dizendo que o loop deve terminar caso a condição seja satisfeita.</p>

<p>No exemplo abaixo, iremos novamente incrementar o objeto <code>i</code>, mas queremos que estas operações parem se ele superar 6, ou seja, no meio da execução vamos verificar se a condição de parada acontece. Veja o código abaixo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span>
<span class="k">repeat</span><span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="m">1</span>
  <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">6</span><span class="p">){</span>
    <span class="k">break</span> <span class="c1"># Se a condição é satisfeita, encerra o loop.</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5
## [1] 6</code></pre></div></p>

<p>Por fim, o <code>next</code> é usado para pular para a próxima iteração caso uma determinada condição seja satisfeita. É muito usado quando você quer ignorar certas repetições, por exemplo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">4</span><span class="p">)</span> <span class="k">next</span>
  <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] 1
## [1] 2
## [1] 5
## [1] 6
## [1] 7
## [1] 8
## [1] 9
## [1] 10</code></pre></div></p>

<p>Perceba que não há necessidade das <code>{ }</code> se a operação a ser executada em um estrutura de controle estiver na mesma linha. Você também poderia usar normalmente o <code>{ }</code>.</p>

<h2 id="algumas-observaes">Algumas observações</h2>

<p>Muitas operações que usam loops podem ser realizadas a partir de outros comandos de maneira mais rápida (família <code>apply()</code>, por exemplo). Os loops no R são conhecidos por serem lentos e dependendo do seu problema eles se tornam inviáveis. No entanto, existem algumas práticas que tornam os loops mais rápidos. Não iremos tratar disso por agora, mas aqueles que tiverem mais curiosidade podem encontrar mais informações <a href="https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r">aqui</a>.</p>

<h2 id="desafio">Desafio</h2>

<p>Fugindo um pouco dos exemplos dos gráficos, vamos lançar um desafio em relação ao método de <a href="https://pt.wikipedia.org/wiki/M%C3%A9todo_de_Newton-Raphson">Newton-Raphson</a> para que seja encontrada a raiz de uma determinada função. O método consiste em um processo iterativo em que a cada período o valor da variável é atualizado de acordo com uma fórmula e há convergência quando o valor absoluto da função para aquele determinado é inferior a um nível de tolerância.</p>

<p>O objetivo é encontrar a raiz da função:
<script type="math/tex">f(x) = x^3 - 2x - 6</script></p>

<p>Partindo de um valor inicial, o processo de iteração é o seguinte:</p>

<script type="math/tex; mode=display">x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)} = x_n - \frac{x_n^3 - 2x_n - 6}{3x_n^2 - 2}</script>

<p>Use como critério de parada se $|f(x_n)| &lt; 0.000001$ e como valor inicial $x_0 = -10$.</p>

<h2 id="referncias">Referências</h2>

<ul>
  <li><a href="http://datascienceplus.com/how-to-write-the-loop-in-r/">How to write the first for loop in R</a></li>
  <li><a href="http://rforpublichealth.blogspot.com.br/2013/01/for-loops-and-how-to-avoid-them.html">For loops (and how to avoid them)</a></li>
  <li><a href="http://stackoverflow.com/questions/2908822/speed-up-the-loop-operation-in-r">Speed up the loop operation in R</a></li>
</ul>

<h2 id="demais-posts-da-sequncia">Demais posts da sequência:</h2>

<ul>
  <li><a href="/blog/2016/03/23/kit-de-sobrevivencia-em-r-parte-1">Kit de sobrevivência em R - Parte 1: Visão Geral e Instalação</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-2">Kit de sobrevivência em R - Parte 2: Operações, Variáveis e Funções</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-3">Kit de sobrevivência em R - Parte 3: Pacotes</a></li>
  <li><a href="/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4">Kit de sobrevivência em R - Parte 4: Carregando Dados</a></li>
  <li><a href="/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5">Kit de sobrevivência em R - Parte 5: Tipos de Dados e Transformações</a></li>
  <li><a href="/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6">Kit de sobrevivência em R - Parte 6: Estruturas de Controle</a></li>
  <li><a href="/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7">Kit de sobrevivência em R - Parte 7: Avançando e Aprofundando</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kit de sobrevivência em R - Parte 5: Tipos de dados e transformações]]></title>
    <link href="http://fulljoin.com.br/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5/"/>
    <updated>2016-04-21T19:00:00-03:00</updated>
    <id>http://fulljoin.com.br/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5</id>
    <content type="html"><![CDATA[<p>Você já aprendeu como carregar um arquivo de dados no R para começar a trabalhar com ele. Agora vamos conhecer o básico necessário para manipular os dados e prepará-los para a análise propriamente dita. Para isso será necessário saber sobre alguns tipos básicos de dados e algumas formas de transformação de dados.</p>

<!-- More -->

<h1 id="por-que-transformar-os-dados">Por que transformar os dados?</h1>

<p>Durante o processo de análise de dados é bastante comum precisar de mais informações que não estão explícitas em sua base de dados, ou seja, informações além das que estão disponíveis nas linhas e colunas.</p>

<p>Transformar os dados permite extrair, ajustar e até mesmo criar informações com seus dados, criando novas colunas, novas linhas, ou quem sabe um outro arquivo de dados derivado do original.</p>

<p>Infelizmente, aqui vai uma notícia ruim: não existe padrão algum para transformação de dados, vai depender muito do design dos seus dados, das necessidades da sua análise e da sua criatividade!</p>

<p>A notícia boa é que, quanto mais você conhecer formas de transformar os dados e quanto mais dominar os tipos de dados existentes em R, a tarefa de transformação de dados será mais fácil e até mais divertida.</p>

<h1 id="tipos-de-dados">Tipos de dados</h1>

<p>Existem diversos tipos de dados em R, alguns mais básicos e outros mais complexos (não em termos de dificuldade, e sim de estrutura). Vamos tentar apresentar alguns na prática ao longo do post.</p>

<p>Lembra dos dados utilizados no <a href="/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4">último post</a>? Vamos usá-los novamente como exemplo. Lembre-se de informar ao R o local onde o arquivo está para que ele possa ler.</p>

<p>Carregue algum dos arquivos de forma apropriada (todos arquivos tem o mesmo conteúdo). Como exemplo, escolhemos o arquivo com colunas delimitadas por <code>;</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.table</span><span class="p">(</span><span class="err">‘</span><span class="n">desemprego_uf_ponto_virgula.txt</span><span class="err">’</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span><span class="p">;</span><span class="err">”</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="err">“</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span></code></pre></div></p>

<p>Esses dados trazem informações trimestrais ao longo dos anos da taxa de desemprego das Unidades da Federação do Brasil.</p>

<p>No post anterior conseguimos dar uma olhada superficial usando <code>head()</code> e <code>tail()</code>. Para começar a transformar os dados precisaremos aprofundar um pouco mais. Usaremos então o <code>class()</code> e o <code>str()</code> para investigar melhor nossos dados.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">class</span><span class="p">(</span><span class="n">dados</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] “data.frame”</code></pre></div></p>

<p>A função <code>class()</code> recebe como parâmetro uma variável, e como resposta ela apresenta o tipo de dado dessa variável. Temos então um <code>data.frame</code>.</p>

<h3 id="dataframe">Data.frame</h3>

<p>Data frame é um tipo de dado complexo, um dos mais utilizados em R. É nele que você armazena conjuntos de dados estruturados em linhas e colunas. Um data frame possui colunas nomeadas, sendo que todas as colunas possuem a mesma quantidade de linhas.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">str</span><span class="p">(</span><span class="n">dados</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## ‘data.frame’:	432 obs. of  4 variables:
##  $ Ano            : int  2012 2012 2012 2012 2013 2013 2013 2013 2014 2014 …
##  $ Trimestre      : Factor w/ 4 levels “abr-mai-jun”,..: 2 1 3 4 2 1 3 4 2 1 …
##  $ UF             : Factor w/ 27 levels “Acre”,”Alagoas”,..: 22 22 22 22 22 22 22 22 22 22 …
##  $ Taxa_Desemprego: num  8.01 6.22 5.88 5.27 6.11 …</code></pre></div></p>

<p>Com a função <code>str()</code> podemos examinar melhor a estrutura do nosso data frame.
Reparem que é um conjunto de dados que possui 4 variáveis (colunas) e 432 observações (linhas). Temos ainda uma listagem com o nome das colunas, o tipo de dado presente em cada coluna e uma pequena amostra dos dados.</p>

<blockquote>
  <p>Matrizes também são objetos de duas dimensões (linhas e colunas). No entanto, diferentemente do data.frame, elas somente aceitam um tipo de dado.</p>
</blockquote>

<h3 id="integer">Integer</h3>

<p>Trata-se de um tipo de dado básico que representa um número inteiro. É tão simples que não há muito o que comentar: 1, 2, 3, 4… até 2147483647. Tente <code>class(dados$Ano)</code> e veja que o ano é um tipo inteiro.</p>

<h3 id="factor">Factor</h3>

<p>É um tipo de dado complexo que representa categorias (levels). Tentando ser o máximo simplista, é uma lista de categorias enumeradas, ou seja, é uma sequência de informações textuais (palavras) representadas por um número. Você vê as categorias e o R “vê” os números que representam essas categorias. Esse tipo é muito útil para modelos estatísticos.</p>

<p>Parece um pouco confuso de entender, mas factor é a forma mais eficiente do R interpretar uma sequência de palavras. Veja o resultado do comando abaixo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">unique</span><span class="p">(</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##  [1] Rondônia            Acre                Amazonas         &lt;br /&gt;
##  [4] Roraima             Pará                Amapá            &lt;br /&gt;
##  [7] Tocantins           Maranhão            Piauí            &lt;br /&gt;
## [10] Ceará               Rio Grande do Norte Paraíba          &lt;br /&gt;
## [13] Pernambuco          Alagoas             Sergipe          &lt;br /&gt;
## [16] Bahia               Minas Gerais        Espírito Santo   &lt;br /&gt;
## [19] Rio de Janeiro      São Paulo           Paraná           &lt;br /&gt;
## [22] Santa Catarina      Rio Grande do Sul   Mato Grosso do Sul 
## [25] Mato Grosso         Goiás               Distrito Federal &lt;br /&gt;
## 27 Levels: Acre Alagoas Amapá Amazonas Bahia … Tocantins</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">unique</span><span class="p">(</span><span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] jan-fev-mar abr-mai-jun jul-ago-set out-nov-dez
## Levels: abr-mai-jun jan-fev-mar jul-ago-set out-nov-dez</code></pre></div></p>

<p>A visualização que o R fornece não ajuda muito, mas repare que cada categoria possui um número. Exemplo: “Rondônia” - 1, “Acre” - 2, “Mato Grosso” - 25, “Distrito Federal” - 27; ou ainda “jan-fev-mar” - 1, “abr-mai-jun” - 2, “jul-ago-set” - 3, “out-nov-dez” - 4.</p>

<p>Então podemos dizer que nossa coluna UF é um factor de 27 levels, e Trimestre é um factor de 4 levels.</p>

<p>Mas o que é esse cifrão <code>$</code> que usamos nos comandos acima? É uma notação do R para quando você quer visualizar ou trabalhar com uma coluna (variável) de um data.frame. Você verá que o <code>$</code> também é utilizado em outros tipos de objetos, como listas. A ideia é acessar uma parte de um objeto.</p>

<p>No caso data.frame, você informa o nome do objeto, o <code>$</code>, e em seguida o nome da coluna que você quer. Experimente: <code>dados$Ano</code>, <code>dados$UF</code>, <code>dados$Trimestre</code> e <code>dados$Taxa_Desemprego</code>. Essa notação é muito importante e você a utilizará bastante.</p>

<p>E o que seria essa função <code>unique()</code>? É uma função básica do R para listar todos os valores de uma variável sem repetição. Olhando todos os dados em <code>dados$UF</code> você vai reparar que os nomes aparecem várias vezes em várias linhas, o <code>unique()</code> lista a ocorrência única de cada nome.</p>

<h3 id="numeric">Numeric</h3>

<p>Continuando a exploração dos tipos, temos o <code>numeric</code> ou <code>num</code>, um tipo básico capaz de representar números decimais. O tipo <code>numeric</code> também consegue representar inteiros. Tente <code>class(dados$Taxa_Desemprego)</code> e repare que é um tipo numérico.</p>

<h1 id="transformaes">Transformações</h1>

<p>Tendo consciência dos tipos de dados que compõem nosso data frame, já é possível começar a imaginar as análises que podem ser feitas.</p>

<p>Vamos supor que surgiu a necessidade de analisarmos os dados de desemprego por semestre. Podemos observar nos dados que temos informações explícitas por trimestre e de certa forma por ano também. Para começarmos os cálculos então seria interessante ter uma variável (coluna) indicando o semestre.</p>

<p>Ora, essa informação já existe no conjunto de dados, afinal, temos trimestres e anos. Porém, não está explícita em nenhuma variável. Então vamos transformar os dados e criar essa variável!</p>

<p>Primeiramente vamos criar a variável. A forma é muito semelhante à criação de uma variável normal, mas vamos usar o <code>$</code> para indicar que estamos criando uma variável dentro do data frame.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span><span class="o">$</span><span class="n">Semestre</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span>
<span class="n">head</span><span class="p">(</span><span class="n">dados</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego Semestre
## 1 2012 jan-fev-mar Rondônia           8.008        1
## 2 2012 abr-mai-jun Rondônia           6.224        1
## 3 2012 jul-ago-set Rondônia           5.882        1
## 4 2012 out-nov-dez Rondônia           5.274        1</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tail</span><span class="p">(</span><span class="n">dados</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##      Ano   Trimestre               UF Taxa_Desemprego Semestre
## 429 2015 jan-fev-mar Distrito Federal          10.784        1
## 430 2015 abr-mai-jun Distrito Federal           9.627        1
## 431 2015 jul-ago-set Distrito Federal          10.258        1
## 432 2015 out-nov-dez Distrito Federal           9.707        1</code></pre></div></p>

<p>Acabamos de criar uma nova coluna e atribuir 1 a todas as linhas dessa coluna. Não é exatamente o que queremos. Queremos atribuir 1 para primeiro semestre e 2 para segundo semestre. Para conseguir isso precisaremos atribuir a variável segundo algumas condições.</p>

<p>Ou seja, quando for trimestre <code>jan-fev-mar</code> ou <code>abr-mai-jun</code> vamos atribuir 1, quando for o trimestre <code>jul-ago-set</code> ou <code>out-nov-dez</code> vamos atribuir 2:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span><span class="o">$</span><span class="n">Semestre</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">jan</span><span class="o">-</span><span class="n">fev</span><span class="o">-</span><span class="n">mar</span><span class="err">’</span> <span class="o">|</span> <span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">abr</span><span class="o">-</span><span class="n">mai</span><span class="o">-</span><span class="n">jun</span><span class="err">’</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">1</span>
<span class="n">dados</span><span class="o">$</span><span class="n">Semestre</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">jul</span><span class="o">-</span><span class="n">ago</span><span class="o">-</span><span class="n">set</span><span class="err">’</span> <span class="o">|</span> <span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">out</span><span class="o">-</span><span class="n">nov</span><span class="o">-</span><span class="n">dez</span><span class="err">’</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="m">2</span>
<span class="n">head</span><span class="p">(</span><span class="n">dados</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego Semestre
## 1 2012 jan-fev-mar Rondônia           8.008        1
## 2 2012 abr-mai-jun Rondônia           6.224        1
## 3 2012 jul-ago-set Rondônia           5.882        2
## 4 2012 out-nov-dez Rondônia           5.274        2
## 5 2013 jan-fev-mar Rondônia           6.114        1
## 6 2013 abr-mai-jun Rondônia           4.771        1</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tail</span><span class="p">(</span><span class="n">dados</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##      Ano   Trimestre               UF Taxa_Desemprego Semestre
## 427 2014 jul-ago-set Distrito Federal           8.861        2
## 428 2014 out-nov-dez Distrito Federal           8.708        2
## 429 2015 jan-fev-mar Distrito Federal          10.784        1
## 430 2015 abr-mai-jun Distrito Federal           9.627        1
## 431 2015 jul-ago-set Distrito Federal          10.258        2
## 432 2015 out-nov-dez Distrito Federal           9.707        2</code></pre></div></p>

<p>Repare que dessa vez estamos usando <code>[ ]</code>. Os colchetes servem para fazermos filtragens “dentro” de um vetor ou um data frame. Mas o que é um vetor? O vetor é um objeto unidimensional. Além disso, ele só aceita um tipo de dado.</p>

<p>Mas o que tem isso tem a ver com o código acima? Bem, quando selecionamos a variável semestre, o objeto resultante não será mais um data.frame, e sim um vetor.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">is.vector</span><span class="p">(</span><span class="n">dados</span><span class="o">$</span><span class="n">Semestre</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] TRUE</code></pre></div></p>

<p>Veja que a função <code>is.vector()</code> verifica se o objeto é um vetor. Ou seja, o objeto tem apenas uma dimensão. Isto tem implicações sobre <code>[ ]</code>. Se o objeto possuir duas dimensões, será preciso dizer em qual dimensão você está fazendo a seleção ou filtragem.</p>

<p>As dimensões são separadas por vírgulas. Por exemplo, no caso do data frame, como existem duas dimensões (linhas e colunas) será preciso dizer em qual nós estamos interessados. Por exemplo, teste os seguintes comandos:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Selecionar as 5 primeiras linhas</span>
<span class="n">dados</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="p">]</span>
<span class="c1"># Selecionar as 5 primeiras linhas e as duas primeiras colunas</span>
<span class="n">dados</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span>
<span class="c1"># Selecionar todas as linhas e as duas primeiras colunas</span>
<span class="n">dados</span><span class="p">[,</span> <span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span></code></pre></div></p>

<p>Apesar de ter sido usado apenas números, você pode usar condições e nomes das colunas. Tente o seguinte:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Selecionar as 5 primeiras linhas e a coluna UF e Taxa_Desemprego</span>
<span class="n">dados</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">UF</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Taxa_Desemprego</span><span class="err">”</span><span class="p">)]</span></code></pre></div></p>

<p>Nesse caso usamos um vetor <code>c()</code> para informar a listagem de nomes de colunas. No próximo post aprofundaremos mais no uso das filtragens de linha e coluna dentro do data frame.</p>

<p>No caso da variável semestre, estamos tratando apenas de uma coluna, portanto teremos um vetor unidimensional, logo, as condições que estão dentro <code>[ ]</code> serão utilizadas para selecionar as posições exatas que receberão o valor da atribuição <code>&lt;-</code>.</p>

<p>Concluindo, vamos usar um exemplo mais complexo. Suponha que você queira criar um data.frame novo apenas com as linhas em que UF é igual a São Paulo e com as colunas <code>Ano</code>, <code>Trimestre</code> e <code>Taxa_Desemprego</code>. Para isto, você irá fazer uma filtragem em um data frame (duas dimensões) e atribuir o resultado para uma variável nova <code>SP</code>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">SP</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">dados</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">==</span> <span class="err">“</span><span class="n">S</span><span class="err">ã</span><span class="n">o</span> <span class="n">Paulo</span><span class="err">”</span><span class="p">,</span> <span class="n">c</span><span class="p">(</span><span class="err">“</span><span class="n">Ano</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Trimestre</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Taxa_Desemprego</span><span class="err">”</span><span class="p">)]</span>
<span class="n">head</span><span class="p">(</span><span class="n">SP</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##      Ano   Trimestre Taxa_Desemprego
## 305 2012 jan-fev-mar           7.792
## 306 2012 abr-mai-jun           7.524
## 307 2012 jul-ago-set           6.889
## 308 2012 out-nov-dez           6.754
## 309 2013 jan-fev-mar           7.718
## 310 2013 abr-mai-jun           7.405</code></pre></div></p>

<h3 id="logical">Logical</h3>

<p>Quando falamos de filtragens, necessariamente falamos também de operadores lógicos. Operações lógicas são operações comparativas que respondem um tipo específico de dados, os tipos lógicos(booleanos): TRUE (verdadeiro) ou FALSE (falso). Tente <code>class(TRUE)</code> ou <code>class(FALSE)</code>.</p>

<p>Faça um pequeno experimento com o que tem dentro dos colchetes. Digite o seguinte comando:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">jan</span><span class="o">-</span><span class="n">fev</span><span class="o">-</span><span class="n">mar</span><span class="err">’</span> <span class="o">|</span> <span class="n">dados</span><span class="o">$</span><span class="n">Trimestre</span> <span class="o">==</span> <span class="err">‘</span><span class="n">abr</span><span class="o">-</span><span class="n">mai</span><span class="o">-</span><span class="n">jun</span><span class="err">’</span></code></pre></div></p>

<p>O R faz essa comparação em todas as linhas e te retorna dizendo exatamente em quais linhas essa condição é verdadeira ou falsa. Esse comando vai retornar verdadeiro para todas as linhas em que trimestre for igual à <code>jan-fev-mar</code> <strong>OU</strong> for igual a <code>abr-mai-jun</code>.</p>

<p>Para entender melhor, segue alguns operadores lógicos e seus significados:</p>

<ul>
  <li><code>==</code> igual a: compara dois objetos e se forem iguais, retorna TRUE, caso contrário, FALSE;</li>
  <li><code>!=</code> diferente: compara dois objetos e se forem diferentes, retorna TRUE, caso contrário, FALSE;</li>
  <li><code>|</code> ou (or): compara dois objetos, se um dos dois for TRUE, retorna TRUE, se os dois forem FALSE, retorna FALSE;</li>
  <li><code>&amp;</code> e (and): compara dois objetos, se os dois forem TRUE, retorna TRUE, se um dos dois ou os dois forem FALSE, retorna FALSE;</li>
  <li><code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code> maior, maior ou igual, menor, menor ou igual: compara grandeza de dois números e retorna TRUE ou FALSE conforme a condição;</li>
</ul>

<p>Segue alguns exemplos para entender os operadores lógicos:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">4</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">5</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] TRUE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="m">6</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] TRUE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">5</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">6</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">3</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] TRUE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="p">(</span><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">6</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="m">5</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">3</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">2</span> <span class="o">!=</span> <span class="m">1</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] TRUE</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="m">2</span> <span class="o">==</span> <span class="m">1</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## [1] FALSE</code></pre></div></p>

<p>Ao longo dos próximos posts vamos trabalhar melhor os operadores lógicos e as filtragens, aos poucos o uso ficará intuitivo.</p>

<p>Seguindo com as transformações, vamos supor também que, além de analisar o desemprego por UF, que estão explícitos na variável <code>dados$UF</code>, queremos também analisar o desemprego por Região (Norte, Sul, Nordeste, Centro Oeste e Sudeste):</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span><span class="o">$</span><span class="n">Regiao</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">%</span><span class="k">in</span><span class="o">%</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Rond</span><span class="err">ô</span><span class="n">nia</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Acre</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Amazonas</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Roraima</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Par</span><span class="err">á’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Amap</span><span class="err">á’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tocantins</span><span class="err">’</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="err">‘</span><span class="n">Norte</span><span class="err">’</span> 
<span class="n">dados</span><span class="o">$</span><span class="n">Regiao</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">%</span><span class="k">in</span><span class="o">%</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Maranh</span><span class="err">ã</span><span class="n">o</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Piau</span><span class="err">í’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Cear</span><span class="err">á’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Rio</span> <span class="n">Grande</span> <span class="n">do</span> <span class="n">Norte</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Para</span><span class="err">í</span><span class="n">ba</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Pernambuco</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Alagoas</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Sergipe</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Bahia</span><span class="err">’</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="err">‘</span><span class="n">Nordeste</span><span class="err">’</span> 
<span class="n">dados</span><span class="o">$</span><span class="n">Regiao</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">%</span><span class="k">in</span><span class="o">%</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Minas</span> <span class="n">Gerais</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Esp</span><span class="err">í</span><span class="n">rito</span> <span class="n">Santo</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Rio</span> <span class="n">de</span> <span class="n">Janeiro</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">S</span><span class="err">ã</span><span class="n">o</span> <span class="n">Paulo</span><span class="err">’</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="err">‘</span><span class="n">Sudeste</span><span class="err">’</span> <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
<span class="n">dados</span><span class="o">$</span><span class="n">Regiao</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">%</span><span class="k">in</span><span class="o">%</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Paran</span><span class="err">á’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Santa</span> <span class="n">Catarina</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Rio</span> <span class="n">Grande</span> <span class="n">do</span> <span class="n">Sul</span><span class="err">’</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="err">‘</span><span class="n">Sul</span><span class="err">’</span>
<span class="n">dados</span><span class="o">$</span><span class="n">Regiao</span><span class="p">[</span><span class="n">dados</span><span class="o">$</span><span class="n">UF</span> <span class="o">%</span><span class="k">in</span><span class="o">%</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Mato</span> <span class="n">Grosso</span> <span class="n">do</span> <span class="n">Sul</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Mato</span> <span class="n">Grosso</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Goi</span><span class="err">á</span><span class="n">s</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Distrito</span> <span class="n">Federal</span><span class="err">’</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="err">‘</span><span class="n">Centro</span> <span class="n">Oeste</span><span class="err">’</span>
<span class="n">head</span><span class="p">(</span><span class="n">dados</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##     Ano   Trimestre       UF Taxa_Desemprego Semestre Regiao
## 1  2012 jan-fev-mar Rondônia           8.008        1  Norte
## 2  2012 abr-mai-jun Rondônia           6.224        1  Norte
## 3  2012 jul-ago-set Rondônia           5.882        2  Norte
## 4  2012 out-nov-dez Rondônia           5.274        2  Norte
## 5  2013 jan-fev-mar Rondônia           6.114        1  Norte
## 6  2013 abr-mai-jun Rondônia           4.771        1  Norte
## 7  2013 jul-ago-set Rondônia           4.534        2  Norte
## 8  2013 out-nov-dez Rondônia           4.902        2  Norte
## 9  2014 jan-fev-mar Rondônia           4.917        1  Norte
## 10 2014 abr-mai-jun Rondônia           4.112        1  Norte
## 11 2014 jul-ago-set Rondônia           4.111        2  Norte
## 12 2014 out-nov-dez Rondônia           3.575        2  Norte
## 13 2015 jan-fev-mar Rondônia           4.396        1  Norte
## 14 2015 abr-mai-jun Rondônia           4.919        1  Norte
## 15 2015 jul-ago-set Rondônia           6.679        2  Norte</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tail</span><span class="p">(</span><span class="n">dados</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##      Ano   Trimestre               UF Taxa_Desemprego Semestre
## 427 2014 jul-ago-set Distrito Federal           8.861        2
## 428 2014 out-nov-dez Distrito Federal           8.708        2
## 429 2015 jan-fev-mar Distrito Federal          10.784        1
## 430 2015 abr-mai-jun Distrito Federal           9.627        1
## 431 2015 jul-ago-set Distrito Federal          10.258        2
## 432 2015 out-nov-dez Distrito Federal           9.707        2
##           Regiao
## 427 Centro Oeste
## 428 Centro Oeste
## 429 Centro Oeste
## 430 Centro Oeste
## 431 Centro Oeste
## 432 Centro Oeste</code></pre></div></p>

<p>Novamente estamos usando os colchetes para fazer uma filtragem e atribuir <code>Norte</code>, <code>Nordeste</code>, <code>Sudeste</code>, <code>Sul</code> e <code>Centro Oeste</code> apenas às linhas específicas em que o filtro dentro dos colchetes retorne <code>TRUE</code>.</p>

<p>Nesse caso estamos usando o operador <code>%in%</code>, que faz uma comparação para ver se o objeto está dentro de uma listagem (vetor) de outros objetos. Nas linhas em que <code>dados$UF</code> estiver “dentro” da listagem de UFs, o filtro retornará TRUE e a atribuição da variável será feita, caso contrário retornará FALSE e não vai atribuir o valor à <code>dados$Regiao</code>.</p>

<p>Para finalizar os exemplos de transformações, vamos tentar uma abordagem com funções matemáticas. Imagine que sua equipe está planejando estimar um modelo com base nesses dados e por algum motivo específico surgiu a necessidade de usar o logaritmo da taxa de desemprego. Não é uma informações explícita mas certamente podemos produzir com o que já temos.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados</span><span class="o">$</span><span class="n">Log_Taxa_Desemprego</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">log</span><span class="p">(</span><span class="n">dados</span><span class="o">$</span><span class="n">Taxa_Desemprego</span><span class="p">)</span>
<span class="n">head</span><span class="p">(</span><span class="n">dados</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##     Ano   Trimestre       UF Taxa_Desemprego Semestre Regiao
## 1  2012 jan-fev-mar Rondônia           8.008        1  Norte
## 2  2012 abr-mai-jun Rondônia           6.224        1  Norte
## 3  2012 jul-ago-set Rondônia           5.882        2  Norte
## 4  2012 out-nov-dez Rondônia           5.274        2  Norte
## 5  2013 jan-fev-mar Rondônia           6.114        1  Norte
## 6  2013 abr-mai-jun Rondônia           4.771        1  Norte
## 7  2013 jul-ago-set Rondônia           4.534        2  Norte
## 8  2013 out-nov-dez Rondônia           4.902        2  Norte
## 9  2014 jan-fev-mar Rondônia           4.917        1  Norte
## 10 2014 abr-mai-jun Rondônia           4.112        1  Norte
## 11 2014 jul-ago-set Rondônia           4.111        2  Norte
## 12 2014 out-nov-dez Rondônia           3.575        2  Norte
## 13 2015 jan-fev-mar Rondônia           4.396        1  Norte
## 14 2015 abr-mai-jun Rondônia           4.919        1  Norte
## 15 2015 jul-ago-set Rondônia           6.679        2  Norte
##    Log_Taxa_Desemprego
## 1             2.080441
## 2             1.828413
## 3             1.771897
## 4             1.662789
## 5             1.810581
## 6             1.562556
## 7             1.511605
## 8             1.589643
## 9             1.592699
## 10            1.413910
## 11            1.413666
## 12            1.273965
## 13            1.480695
## 14            1.593105
## 15            1.898968</code></pre></div></p>

<p>Estamos criando uma novas variável em nosso data frame, armazenando o <code>log()</code> na nova variável <code>Log_Taxa_Desemprego</code> em nosso data frame.</p>

<p>A função será aplicada a todas as linhas do data frame, pois não estamos usando nenhum filtro. Em cada linha será usado o valor do campo <code>Taxa_Desemprego</code> como parâmetro da função.</p>

<h1 id="desafio">Desafio</h1>

<p>Apenas para treinar, tente criar uma variável nesse data frame para classificar a taxa de desemprego em <code>alta</code>, <code>média</code> ou <code>baixa</code>, com o critério que quiser. Crie também uma variável armazenando a raiz quadrada da taxa de desemprego.</p>

<p>Muitas outras transformações são possíveis com essa simples base de dados usando atribuição com filtros e funções matemáticas. Consegue imaginar outras transformações? Deixe um comentário sobre os resultados que conseguiu!</p>

<h1 id="referncias">Referências:</h1>

<ul>
  <li><a href="http://www.cyclismo.org/tutorial/R/types.html">Basic Data Types</a></li>
  <li><a href="http://www.r-tutor.com/r-introduction/basic-data-types">Basic Data Types II</a></li>
  <li><a href="http://www.computerworld.com/article/2486425/business-intelligence/business-intelligence-4-data-wrangling-tasks-in-r-for-advanced-beginners.html">4 data wrangling tasks in R for advanced beginners</a></li>
</ul>

<h2 id="demais-posts-da-sequncia">Demais posts da sequência:</h2>

<ul>
  <li><a href="/blog/2016/03/23/kit-de-sobrevivencia-em-r-parte-1">Kit de sobrevivência em R - Parte 1: Visão Geral e Instalação</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-2">Kit de sobrevivência em R - Parte 2: Operações, Variáveis e Funções</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-3">Kit de sobrevivência em R - Parte 3: Pacotes</a></li>
  <li><a href="/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4">Kit de sobrevivência em R - Parte 4: Carregando Dados</a></li>
  <li><a href="/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5">Kit de sobrevivência em R - Parte 5: Tipos de Dados e Transformações</a></li>
  <li><a href="/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6">Kit de sobrevivência em R - Parte 6: Estruturas de Controle</a></li>
  <li><a href="/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7">Kit de sobrevivência em R - Parte 7: Avançando e Aprofundando</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kit de sobrevivência em R - Parte 4: Carregando Dados]]></title>
    <link href="http://fulljoin.com.br/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4/"/>
    <updated>2016-04-12T21:00:00-03:00</updated>
    <id>http://fulljoin.com.br/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4</id>
    <content type="html"><![CDATA[<p>Seguindo a sequência do <em>Kit de sobrevivência em R</em>, vamos abordar um pouco sobre uma das partes iniciais de qualquer análise ou trabalho que vá ser feito no R: carregamento e leitura de dados. Nesse post você irá aprender formas básicas de carregar dados e começar os trabalhos.</p>

<!-- More -->

<h1 id="estrutura-dos-dados">Estrutura dos dados</h1>

<p>Eis aqui uma notícia ruim: não existe um padrão dominante para armazenamento de dados. O que isso significa? Significa que, na vida real, você vai se deparar com os mais diferentes tipos de fontes de dados e mesmo assim vai ter que dar um jeito de analisá-las e estudá-las para concluir seus trabalhos.</p>

<p>Ou seja, existem diversas formas de carregar dados para trabalhar com eles no R. Em prol da objetividade, vamos tratar dos casos mais comuns e mais básicos primeiro. Esse assunto pode ser extremamente vasto, então, criaremos primeiro uma base para, em posts futuros, aprofundarmos em fontes de dados mais complexas.</p>

<p>De maneira geral, você irá encontrar dados disponibilizados basicamente em três formas básicas: estruturados, não estruturados e semi-estruturados.</p>

<h2 id="dados-estruturados">Dados Estruturados</h2>

<p>Basicamente são conjuntos de informações organizadas em colunas (atributos, variáveis, <em>features</em>, etc.) e linhas (registros, itens, observações, etc.). São dados encontrados em bancos de dados, arquivos com algum tipo de separação entre as colunas, excel, arquivos com campos de tamanho fixo, etc.</p>

<h2 id="dados-no-estruturados">Dados não estruturados</h2>

<p>Como o nome diz, não tem um estrutura previsível, ou seja, cada arquivo possui uma forma única de ser carregado e manejado. Geralmente são arquivos com forte teor textual. Podemos citar, por exemplo, emails, twitters, PDFs, imagens, etc. Muito usados em mineração de dados.</p>

<h2 id="dados-semi-estruturados">Dados semi-estruturados</h2>

<p>Também possuem estrutura fixa, porém, não seguem o padrão de estrutura linha/coluna, ou seja, é uma estrutura mais complexa e flexível, geralmente hierárquica, estruturada em tags ou marcadores de campos. São exemplos de arquivos semi-estruturados: JSON, XML, HTML, YAML, etc. É o formato mais usado em troca de dados pela internet e consumo de APIs.</p>

<p>Trataremos primeiro dos arquivos estruturados. Em futuros posts vamos abordar os outros tipos, pois são abordagens um pouco mais complexas e é sempre bom começar pelo básico!</p>

<h1 id="preparando-o-ambiente-para-comear">Preparando o ambiente para começar</h1>

<h3 id="limpando-tudo">Limpando tudo</h3>

<p>Antes de começar os trabalhos, é uma boa prática ter certeza de que seu ambiente de trabalho está limpo. Um simples comando garante que está tudo limpo pronto para começar:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rm</span><span class="p">(</span><span class="n">list</span><span class="o">=</span><span class="n">ls</span><span class="p">())</span></code></pre></div></p>

<p>Esse comando na verdade está usando duas funções:</p>

<ul>
  <li>
    <p><code>rm()</code> função para remover um objeto da sessão do R</p>
  </li>
  <li>
    <p><code>ls()</code> função para listar os nomes de todos objetos da sessão do R</p>
  </li>
</ul>

<p>As duas funções conjugadas dão a ordem de <em>remover tudo que estiver na lista de objetos da sessão do R.</em></p>

<p>Pronto. Seus ambiente está limpo.</p>

<h3 id="definindo-diretrio-de-trabalho">Definindo diretório de trabalho</h3>

<p>O R vai “ler” os dados de algum lugar do seu computador. Normalmente o R inicia lendo em um diretório padrão, mas nem sempre os arquivos estarão nesse mesmo diretório. Para dizer ao R onde ele deve ler os arquivos, usaremos o comando <em>set working directory</em>:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">setwd</span><span class="p">(</span><span class="err">“</span><span class="n">Local</span><span class="o">/</span><span class="n">Do</span><span class="o">/</span><span class="n">Seus</span><span class="o">/</span><span class="n">Arquivos</span><span class="o">/</span><span class="n">De</span><span class="o">/</span><span class="n">Trabalho</span><span class="o">/</span><span class="err">”</span><span class="p">)</span></code></pre></div></p>

<p>Também pode ser realizado pelos menus do RStudio em <code>Session &gt; Set Working Directory &gt; Choose Directory...</code> e escolha a pasta onde seus arquivos de dado estarão.</p>

<p><img src="/images/setwd.gif" alt="alt Definindo o diretório de trabalho" title="Definindo o diretório de trabalho" /></p>

<p>Para saber qual o diretório de trabalho está atualmente definido, use o comando <code>getwd()</code>.</p>

<p>Caso você não deseje alterar o diretório de trabalho, também há a opção de ser informado o caminho completo do arquivo (caminho absoluto).</p>

<p>Ok! Agora sim!</p>

<h1 id="tipos-de-carregamento">Tipos de carregamento</h1>

<p>O R possui algumas funções básicas de carregamento. Essas funções tratam de alguns tipos de arquivo, basicamente diferenciados pelo <em>delimitador</em>. Outro aspecto importante é que essas funções básicas pressupõem que cada linha representa um novo registro de dados.</p>

<p>Para ficar mais claro, delimitadores podem ser qualquer coisa que seja usada para separar dados. Por exemplo, os arquivos podem ser separados por vírgulas (<a href="https://pt.wikipedia.org/wiki/Comma-separated_values">CSV - Comma-separated values</a>), por ponto e vírgula (<code>;</code>), por espaçamento TAB (a tecla TAB do teclado mesmo!), por espaços simples ou qualquer outro tipo de símbolo.</p>

<p>E quando não existe delimitador, ou seja, quando os campos estão “colados” uns nos outros? Em alguns casos, arquivos são confeccionados com um tamanho fixo para cada coluna (principalmente em arquivos gigantescos!), e cada linha respeita tamanhos específicos para separar os seus registros.</p>

<p>Como dissemos antes, dados estruturados possuem colunas e linhas (ou atributos e registros, ou variáveis e observações… dá na mesma!). O delimitador é uma forma de separar o conteúdo de cada linha em uma coluna específica. Ficará mais claro a seguir.</p>

<p>Para replicar os exemplos abaixo, baixe <a href="https://www.dropbox.com/s/4tedgnkd85c5q5s/desemprego_uf_pnad.zip?dl=0">este arquivo zip</a> com exemplos de dados em que foram usados diferentes delimitadores. Descompacte o arquivo em alguma pasta do seu computador. Defina esta pasta como o seu diretório de trabalho no RStudio. Além disso, dê uma olhada nos arquivos com o auxílio do bloco de notas ou outro programa para que você tenha ideia como o dado está inicialmente estruturado.</p>

<h1 id="carregando-os-dados">Carregando os dados</h1>

<p>Dividiremos este tópico em duas partes: dados delimitados e dados com campos de tamanho fixo.</p>

<h4 id="dados-com-delimitadores">Dados com delimitadores</h4>

<p>Para importar dados com delimitadores utilizaremos a função <code>read.table()</code>. Essa função permite definir qualquer delimitador para a leitura do arquivo, conforme os exemplos abaixo.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Separado por tabulação</span>
<span class="n">dados.tab</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.table</span><span class="p">(</span><span class="err">‘</span><span class="n">desemprego_uf_tab.txt</span><span class="err">’</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“\</span><span class="n">t</span><span class="err">”</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="err">“</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span> 
<span class="c1"># Separado por ;</span>
<span class="n">dados.ponto.virgula</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.table</span><span class="p">(</span><span class="err">‘</span><span class="n">desemprego_uf_ponto_virgula.txt</span><span class="err">’</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span><span class="p">;</span><span class="err">”</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="err">“</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span> 
<span class="c1"># Separado por espaço</span>
<span class="n">dados.espaco</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.table</span><span class="p">(</span><span class="err">‘</span><span class="n">desemprego_uf_espaco.txt</span><span class="err">’</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="err">“</span> <span class="err">“</span><span class="p">,</span> <span class="n">dec</span> <span class="o">=</span> <span class="err">“</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="n">header</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span></code></pre></div></p>

<p>Reparem no parâmetro <code>header = TRUE</code>, isso significa dizer que a primeira linha do arquivo contem o nome das colunas, ou seja, não é um dado propriamente dito, e sim um metadado pois é uma informação sobre os registros. Caso seu arquivo não contenha o nome das colunas, basta usar <code>header = FALSE</code>.</p>

<p>Após o carregamento, vamos usar a função <code>head()</code>para ver a “cara” dos nossos dados. Veja que eles são iguais nos três casos. Nessa função, você pode especificar o número de linhas que deseja ver. Por exemplo: <code>head(dados.tab, 10)</code>. Para visualizar as últimas linhas, você pode utilizar o <code>tail()</code> da mesma forma. Note que o RStudio tem funcionalidades que permitem que você visualize os dados como uma planilha. Basta clicar no nome do objeto que está listado na aba <em>Environment</em>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">dados.tab</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego
## 1 2012 jan-fev-mar Rondônia           8.008
## 2 2012 abr-mai-jun Rondônia           6.224
## 3 2012 jul-ago-set Rondônia           5.882
## 4 2012 out-nov-dez Rondônia           5.274
## 5 2013 jan-fev-mar Rondônia           6.114
## 6 2013 abr-mai-jun Rondônia           4.771</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">dados.ponto.virgula</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego
## 1 2012 jan-fev-mar Rondônia           8.008
## 2 2012 abr-mai-jun Rondônia           6.224
## 3 2012 jul-ago-set Rondônia           5.882
## 4 2012 out-nov-dez Rondônia           5.274
## 5 2013 jan-fev-mar Rondônia           6.114
## 6 2013 abr-mai-jun Rondônia           4.771</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">dados.espaco</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego
## 1 2012 jan-fev-mar Rondônia           8.008
## 2 2012 abr-mai-jun Rondônia           6.224
## 3 2012 jul-ago-set Rondônia           5.882
## 4 2012 out-nov-dez Rondônia           5.274
## 5 2013 jan-fev-mar Rondônia           6.114
## 6 2013 abr-mai-jun Rondônia           4.771</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tail</span><span class="p">(</span><span class="n">dados.espaco</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##      Ano   Trimestre               UF Taxa_Desemprego
## 429 2015 jan-fev-mar Distrito Federal          10.784
## 430 2015 abr-mai-jun Distrito Federal           9.627
## 431 2015 jul-ago-set Distrito Federal          10.258
## 432 2015 out-nov-dez Distrito Federal           9.707</code></pre></div></p>

<h4 id="dados-com-campos-de-tamanho-fixo">Dados com campos de tamanho fixo</h4>

<p>Para a leitura de dados desse tipo, você precisa saber previamente o tamanho de caracteres reservado para cada campo. Geralmente esse tipo de arquivo vem acompanhando de um arquivo auxiliar explicando o layout dos dados.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dados.fwf</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">read.fwf</span><span class="p">(</span><span class="err">‘</span><span class="n">desemprego_uf_fwf.txt</span><span class="err">’</span><span class="p">,</span> <span class="n">widths</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">6</span><span class="p">),</span>  <span class="n">header</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">,</span>  <span class="n">strip.white</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">)</span></code></pre></div></p>

<p>Reparem que o segundo parâmetro da função, <code>widths</code> é onde você especifica o tamanho de cada campo na ordem em que eles ocorrem na linha. Ou seja, o primeiro campo tem tamanho 4 e o segundo 11. O <code>strip.white = TRUE</code> é a opção para eliminar os espaços em branco que foram incluídos na criação do arquivo para que cada linha tivesse o tamanho total especificado para cada coluna.</p>

<p>O que é esse <code>c()</code>? É uma função que cria um vetor. Explicaremos detalhadamente sobre isso em outro post!</p>

<p>E onde está o <code>header = TRUE</code>? Geralmente arquivos com campos de tamanho fixo não possuem uma linha indicando o cabeçalho. Como dito, esses arquivos costumam vir acompanhados de um arquivo de layout explicando os dados, inclusive o que cada campo significa.</p>

<p>Se olharmos os dados, veremos que o R atribuiu nomes genéricos para as variáveis.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">dados.fwf</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##     V1          V2       V3    V4
## 1 2012 jan-fev-mar Rondônia 8.008
## 2 2012 abr-mai-jun Rondônia 6.224
## 3 2012 jul-ago-set Rondônia 5.882
## 4 2012 out-nov-dez Rondônia 5.274
## 5 2013 jan-fev-mar Rondônia 6.114
## 6 2013 abr-mai-jun Rondônia 4.771</code></pre></div></p>

<p>Para definirmos os nomes das variáveis usaremos o comando <code>colnames()</code>. Basicamente, diremos que os nomes das colunas deverão ser os que estão especificados abaixo:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">colnames</span><span class="p">(</span><span class="n">dados.fwf</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="err">‘</span><span class="n">Ano</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Trimestre</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">UF</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Taxa_Desemprego</span><span class="err">’</span><span class="p">)</span>
<span class="n">head</span><span class="p">(</span><span class="n">dados.fwf</span><span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##    Ano   Trimestre       UF Taxa_Desemprego
## 1 2012 jan-fev-mar Rondônia           8.008
## 2 2012 abr-mai-jun Rondônia           6.224
## 3 2012 jul-ago-set Rondônia           5.882
## 4 2012 out-nov-dez Rondônia           5.274
## 5 2013 jan-fev-mar Rondônia           6.114
## 6 2013 abr-mai-jun Rondônia           4.771</code></pre></div></p>

<h1 id="mais-opes-na-leitura">Mais opções na leitura</h1>

<p>Apresentamos as funções básicas de leitura de arquivo com seu uso padrão mais simples. No entanto, existem muitos outros parâmetros que podem ser usados para especificar mais a leitura dos dados. Vale a pena conferir. Para conhecer mais sobre as funções apresentadas, lembrem-se de usar <code>?</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">?</span><span class="n">read.table</span><span class="p">()</span>
<span class="o">?</span><span class="n">read.fwf</span><span class="p">()</span>
<span class="o">?</span><span class="n">read.delim</span><span class="p">()</span>
<span class="o">?</span><span class="n">read.csv</span><span class="p">()</span></code></pre></div></p>

<blockquote>
  <p>Dica: Repare que <code>read.delim()</code> e <code>read.csv()</code> estão na mesma ajuda do <code>read.table()</code>. Na verdade todas as 3 funções são a mesma, e podem ser reproduzidas com o <code>read.table()</code> apenas mudando alguns parâmetros na chamada da função.</p>
</blockquote>

<h1 id="outras-formas-de-carregar-dados">Outras formas de carregar dados</h1>

<p>Existe diversas outras formas de carregar dados. Mas nosso objetivo aqui é apenas criar uma introdução para conseguir carregar a grande maioria dos formatos de dados mais comuns.</p>

<p>Em breve lançaremos posts explicando leitura de arquivos em excel, arquivos semi-estruturados e arquivos não estruturados.</p>

<h1 id="desafio">Desafio</h1>

<p>Que tal tentar carregar e visualizar no R os dados da série histórica das taxas de vendas de títulos do tesouro direto (<a href="http://www.tesourotransparente.gov.br/ckan/dataset/taxas-dos-titulos-ofertados-pelo-tesouro-direto">download Tesouro Direto</a>)?</p>

<p>Tente também carregar e visualizar os dados do IPCA (Índice Nacional de Preço ao Consumidor Amplo), indicador oficial da inflação brasileira (<a href="http://dados.gov.br/dataset/indice-nacional-de-precos-ao-consumidor-amplo-ipca/resource/3292e931-5ed8-42fb-aa59-4386e115d619">download IPCA</a>).</p>

<p>Teve alguma dificuldade? Comente abaixo para que possamos ajudar!</p>

<h1 id="referncias">Referências:</h1>

<ul>
  <li><a href="https://cran.r-project.org/doc/manuals/r-release/R-data.pdf">R Data Import/Export</a></li>
  <li><a href="http://blog.revolutionanalytics.com/2015/04/new-packages-for-reading-data-into-r-fast.html">New packages for reading data into R — fast</a></li>
  <li><a href="https://www.datacamp.com/community/tutorials/r-tutorial-read-excel-into-r">Reading and Importing Files - DataCamp</a></li>
</ul>

<h2 id="demais-posts-da-sequncia">Demais posts da sequência:</h2>

<ul>
  <li><a href="/blog/2016/03/23/kit-de-sobrevivencia-em-r-parte-1">Kit de sobrevivência em R - Parte 1: Visão Geral e Instalação</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-2">Kit de sobrevivência em R - Parte 2: Operações, Variáveis e Funções</a></li>
  <li><a href="/blog/2016/04/03/kit-de-sobrevivencia-em-r-parte-3">Kit de sobrevivência em R - Parte 3: Pacotes</a></li>
  <li><a href="/blog/2016/04/12/kit-de-sobrevivencia-em-r-parte-4">Kit de sobrevivência em R - Parte 4: Carregando Dados</a></li>
  <li><a href="/blog/2016/04/21/kit-de-sobrevivencia-em-r-parte-5">Kit de sobrevivência em R - Parte 5: Tipos de Dados e Transformações</a></li>
  <li><a href="/blog/2016/05/01/kit-de-sobrevivencia-em-r-parte-6">Kit de sobrevivência em R - Parte 6: Estruturas de Controle</a></li>
  <li><a href="/blog/2016/05/09/kit-de-sobrevivencia-em-r-parte-7">Kit de sobrevivência em R - Parte 7: Avançando e Aprofundando</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
