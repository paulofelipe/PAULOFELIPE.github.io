install.packages('servr', repos = 'http://yihui.name/xran')
install.packages('servr')
x <- 2
(x + x*2 + x^2 + x^x)
x + x*2 + x^2 + x^x
x <- 2
x + x*2 + x^2 + x^x
install.packages('readr')
library(readr)
guess_encoding('~/Documentos/Dados Exemplos/desemprego_uf_ponto_virgula.txt')
install.packages("titanic")
data('titanic')
library(titanic)
data("Titanic")
Titanic
data("titanic_train")
head(titanic_train)
titanic_train
head(titanic_train)
summary(data)
summary(train)
summary(titanic_train
)
install.packages('Amelia')
library(Amelia)
missmap(titanic_train)
summary(titanic_train)
missmap(titanic_train, title = 'teste')
View(titanic_train)
unique(titani])
unique(titanic_train$Cabin)
titanic_train$Cabin[titanic_train$Cabin == ""] <- NA_character_
missmap(titanic_train)
?boxplot
boxplot(Fare ~ Survived, data = titanic_train)
head(titanic_train)
install.packages("flexdashboard")
library(flexdashboard)
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "Teste", icon = "fa fa-stop", color = "dodgerblue")
library(htmltools)
strong(h1(x))
x <- "Teste"
library(htmltools)
strong(h1(x))
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = "Teste2")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = list(texto = "Teste2"))
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = list(texto = "Teste2"), output_dir = "~/Downloads/html_output/")
library(xtable)
"
dados <- data.frame(grupo = c("a", "b", "c", "a", "b", "c"), value = c(10, 15, 20, 4, 3, 1), id = c(rep("teste",3), rep("tééste2",3)))
xtable(dados)
xtable(dados, "html")
print(xtable(dados))
print(xtable(dados), type = 'html')
print(xtable(dados), type = 'html')[1]
cat(print(xtable(dados), type = 'html')[1])
cat(xtable(dados))
library(knitr)
kable(dados)
?kable
kable(dados, format = 'html')
sub("<table>", "<table class = "table-condesed">", kable(dados, format = 'html')
sub("<table>", '<table class = "table-condesed">', kable(dados, format = 'html')
sub("<table>", '<table class = "table-condesed">', kable(dados, format = 'html'))
library(knitr)
k <- kable(dados, format = 'html')
sub("<table>", '<table class="table table-striped">', kable(dados, format = 'html'))
sub("<table>", '<table class="table table-striped">', k)
?kable
header <- '<th style="text-align:left;"> grupo </th>
<th style="text-align:right;"> value </th>
<th style="text-align:left;"> id </th>'
header
sub(header, "a", k)
sub(header, new_header, k)
k <- kable(dados, format = 'html', pad = 0)
k <- sub("<table>", '<table class="table table-striped">', k)
header <- '<th style="text-align:left;"> grupo </th>
<th style="text-align:right;"> value </th>
<th style="text-align:left;"> id </th>'
new_header <- '<th class="col-md-6" style="text-align:left;"> grupo </th>
<th class="col-md-3" style="text-align:right;"> value </th>
<th class="col-md-3" style="text-align:left;"> id </th>'
sub(header, new_header, k)
k <- kable(dados, format = 'html', pad = 0)
k
k
str(k)
install.packages('hmtlTable')
install.packages('htmlTable')
library(htmlTable)
htmlTable(dados)
print(htmlTable(dados))
str(htmlTable(dados))
str(htmlTable(dados))[1]
htmlTable(dados)[1]
htmlTable(dados, row.names = FALSE)
htmlTable(dados, align = c("lcr"))
htmlTable(dados, align = c("lcr"), rnames = FALSE)
cat(htmlTable(dados, align = c("lcr"), rnames = FALSE)[1])
kable(dados, )
kable(dados, format = 'html')
kable(dados, format = 'html', table.attr='class="table table-stripped")
kable(dados, format = 'html', table.attr='class="table table-stripped"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"')
library(flexdashboard)
?valueBox
valueBox(42, caption = "Errors", icon="fa-thumbs-down")
k
dados
dados <- data.frame(grupo = c("a", "b", "c", "a", "b", "c"), value = c(10, 15, 20, 4, 3, 1), id = c(rep("teste",3), rep("tééste2",3)))
library(knitr)
kable(dados)
kable(dados, 'html')
kable(dados, 'html', digits = 2)
kable(dados, 'html', digits = 2,)
kable(dados, 'html', digits = 2)
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr = 'class="teste"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr = 'class="teste22"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr='class="teste22"')
formattable::formattable(dados)
formattable::formattable(dados)[1]
cat(formattable::formattable(dados))
formattable::format_table(dados)
formattable::format_table(dados, format = 'html')
formattable::format_table(dados, format = 'markdown')
formattable::format_table(dados, format = 'pandoc')
library(formattable)
?formattable
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formatR)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
install.packages("formattable")
install.packages("formattable")
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
?format_table
format_table(mtcars, list(mpg = formatter("span",
style = x ~ style(display = "block",
"border-radius" = "4px",
"padding-right" = "4px",
color = "white",
"background-color" = rgb(x/max(x), 0, 0)))))
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
