x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1000000, mean = 10, sd = 5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1000000, mean = 10, sd = 5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.5))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1000000, mean = 10, sd = 5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rexp(1000000, mean = 10, sd = 5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
1/0.5
pop <- rexp(1000000, rate = 0.5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 2)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rexp(1000000, rate = 0.5)
m <- vector()
s <- vector()
n <- 1000
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 2)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rexp(1000000, rate = 0.5)
m <- vector()
s <- vector()
n <- 15
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 2)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rbinom(1e6, size = 1, prob = 0.5)
head(pop)
pop <- rbinom(1e6, size = 1, prob = 0.5)
m <- vector()
s <- vector()
n <- 150
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 0.5)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rbinom(1e6, size = 1, prob = 0.5)
m <- vector()
s <- vector()
n <- 100
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 0.5)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rbinom(1e6, size = 1, prob = 0.5)
m <- vector()
s <- vector()
n <- 10
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 0.5)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1e6, 10, 5)
m <- vector()
s <- vector()
n <- 10
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE)
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue", ylim = c(0, 0.6))
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1e6, 10, 5)
m <- vector()
s <- vector()
n <- 30
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE, ylim = c(0, 0.6))
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
source('~/.active-rstudio-document', echo=TRUE)
pop <- rnorm(1e6, 10, 5)
m <- vector()
s <- vector()
n <- 5
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE, ylim = c(0, 0.6))
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1e6, 10, 5)
m <- vector()
s <- vector()
n <- 500
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 10)/(s/sqrt(n))
hist(t, freq = FALSE, ylim = c(0, 0.6))
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
pop <- rnorm(1e6, 90000, 37000)
m <- vector()
s <- vector()
n <- 191
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 90000)/(s/sqrt(n))
hist(t, freq = FALSE, ylim = c(0, 0.6))
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
pnorm(0.05, lower.tail = FALSE)
qnorm(0.05, lower.tail = FALSE)
pnorm(20,5, mean = 25, sd = 10/sqrt(16))
pnorm(, mean = 25, sd = 10/sqrt(16))
180/25
pnorm(7.2, mean = 8, sd = 2)
pnorm(7.2, mean = 8, sd = 2/sqrt(25))
(7.2 - 8)/(2/sqrt(25))
pnorm(20.5, mean = 25, sd = 10/sqrt(16))
pnorm(-2)
pop <- rbinom(10000, size = 1, prob = 0.7)
0.7*0.3
sd(pop)
head(pop)
mean(pop)
sd(pop)^2
pop <- rbinom(100000, size = 1, prob = 0.7)
sd(pop)^2
0.7*0.3
sd(pop)^2 - 0.21
pop <- rnorm(1e6, 90000, 37000)
m <- vector()
s <- vector()
n <- 20
for(i in 1:10000){
x <- sample(pop, n)
m[i] <- mean(x)
s[i] <- stats::sd(x)
}
mean(m)
mean(s)/sqrt(n)
5/sqrt(n)
t <- (m - 90000)/(37000/sqrt(n))
hist(t, freq = FALSE, ylim = c(0, 0.6))
curve(dt(x, df = n - 1), -4, 4, add = T, col = "blue")
curve(dnorm(x), -4, 4, add = T, col = "red")
(0.58-0.50)/(sqrt(0.5*0.5/150))
qnorm(0.05, lower.tail = FALSE)
(0.58-0.50)/(sqrt(0.25/150))
(0.58-0.50)/(sqrt(0.25/150))
rend <- c(23.6, 22.8, 25.7, 24.8, 26.4, 24.3, 23.9, 25.0)
sum(rend)
mean(rend)
sd(rend)
sd(rend)^2
mean(rend)
sum(rend)
rend <- c(23.6, 22.8, 25.7, 24.8, 26.4, 24.3, 23.9, 25.0)
mean(rend)
sum((rend - mean(rend))^2)
sum((rend - mean(rend))^2)/7
sd(rend)
sd(rend)^2
pt(0.05, df = 7)
pt(0.05, df = 7, lower.tail = FALSE)
qt(0.05, df = 7, lower.tail = FALSE)
(24.5625 - 24)/(sqrt(1.368673/8))
sqrt(1.35125)
(24.5625 - 24)/(sqrt(1.35125/8))
qnorm(0.05, lower.tail = FALSE)
(0.58-0.50)/(sqrt(0.5^2/150))
qt(0.025, df = 7)
0.05^2
(8-1)*1.35125/25
qt(0.025, df = 7)
qt(0.05, df = 7)
(0.58 - 0.5/sqrt(0.25/8))
(0.58 - 0.5/sqrt(0.25/150))
0.5^2
(.58 - .5)/(sqrt(0.25/150))
pnorm(0.05, lower.tail = FALSE)
qnorm(0.05, lower.tail = FALSE)
z.test <- function(x,n,p=NULL,conf.level=0.95,alternative="less") {
ts.z <- NULL
cint <- NULL
p.val <- NULL
phat <- x/n
qhat <- 1 - phat
# If you have p0 from the population or H0, use it.
# Otherwise, use phat and qhat to find SE.phat:
if(length(p) > 0) {
q <- 1-p
SE.phat <- sqrt((p*q)/n)
ts.z <- (phat - p)/SE.phat
p.val <- pnorm(ts.z)
if(alternative=="two.sided") {
p.val <- p.val * 2
}
if(alternative=="greater") {
p.val <- 1 - p.val
}
} else {
# If all you have is your sample, use phat to find
# SE.phat, and don't run the hypothesis test:
SE.phat <- sqrt((phat*qhat)/n)
}
cint <- phat + c(
-1*((qnorm(((1 - conf.level)/2) + conf.level))*SE.phat),
((qnorm(((1 - conf.level)/2) + conf.level))*SE.phat) )
return(list(estimate=phat,ts.z=ts.z,p.val=p.val,cint=cint))
}
z.test(x = 87, n = 150, alternative = "greater", p = = 0.5)
z.test(x = 87, n = 150, alternative = "greater", p = 0.5)
pnorm(1.959592)
1  - pnorm(1.959592)
prop.test(x = 87, n = 150, p = 0.5, alternative = "greater")
?prop.test
pnorm(0.05)
qnorm(0.05)
pnorm(-1,144855)
pnorm(-1,144855, lower.tail = FALSE)
pnorm(-1.144855, lower.tail = FALSE)
n = 25                # sample size
sigma = 2         # population standard deviation
sem = sigma/sqrt(n); sem   # standard error
alpha = .05           # significance level
mu0 = 8           # hypothetical lower bound
q = qnorm(alpha, mean=mu0, sd=sem); q
mu = 7            # assumed actual mean
pnorm(q, mean=mu, sd=sem, lower.tail=FALSE)
n = 25                # sample size
sigma = 2         # population standard deviation
sem = sigma/sqrt(n); sem   # standard error
alpha = .05           # significance level
mu0 = 8           # hypothetical lower bound
q = qnorm(alpha, mean=mu0, sd=sem); q
mu = 7.8            # assumed actual mean
pnorm(q, mean=mu, sd=sem, lower.tail=FALSE)
pnorm(7.342058, mean = 7.8, sd = 2/sqrt(25), lower.tail = FALSE)
n = 191                # sample size
sigma = 37500         # population standard deviation
sem = sigma/sqrt(n); sem   # standard error
alpha = .05           # significance level
mu0 = 90000           # hypothetical lower bound
q = qnorm(alpha, mean=mu0, sd=sem, lower.tail = FALSE); q
mu = 105000            # assumed actual mean
pnorm(q, mean=mu, sd=sem, lower.tail=TRUE)
n = 191                # sample size
sigma = 37500         # population standard deviation
sem = sigma/sqrt(n); sem   # standard error
alpha = .05           # significance level
mu0 = 90000           # hypothetical lower bound
q = qnorm(alpha, mean=mu0, sd=sem, lower.tail = FALSE); q
mu = 105000            # assumed actual mean
pnorm(q, mean=mu, sd=sem, lower.tail=TRUE)
1.644854*(37500/sqrt(191)) + 90000
n = 191                # sample size
sigma = 37500         # population standard deviation
sem = sigma/sqrt(n); sem   # standard error
alpha = .05           # significance level
mu0 = 90000           # hypothetical lower bound
q = qnorm(alpha, mean=mu0, sd=sem, lower.tail = FALSE); q
mu = 105000            # assumed actual mean
pnorm(q, mean=mu, sd=sem, lower.tail=TRUE)
1.644854*(37500/sqrt(191)) + 90000
pnorm(-3.883258)
pnorm(94463,15, mean = 105000, sd = 37500/sqrt(191))
pnorm(94463,15, mean = 90000, sd = 37500/sqrt(191), lower.tail = FALSE)
pnorm(94463,15, mean = 90000, sd = 37500/sqrt(191), lower.tail = FALSE)
pnorm(94463,15, mean = 90000, sd = 37500/sqrt(191), lower.tail = FALSE)
pnorm(94463.15, mean = 90000, sd = 37500/sqrt(191), lower.tail = FALSE)
pnorm(94463.15, mean = 105000, sd = 37500/sqrt(191))
pt((37.72616 - 40)/(5/sqrt(15)), df = 14 )
pt((37 - 40)/(5/sqrt(15)), df = 14 )
pt((37.8 - 40)/(5/sqrt(15)), df = 14 )
pt((37.7 - 40)/(5/sqrt(15)), df = 14 )
pt((37.72616 - 35)/(5/sqrt(15)), df = 14, lower.tail = FALSE)
pnorm(94463.15, mean = 105000, sd = 37500/sqrt(191))
pt((37.72616 - 35)/(5/sqrt(15)), df = 14, lower.tail = FALSE)
rm(list = ls())
library(checkpoint)
library(data.table)
library(dplyr)
library(dtplyr)
library(stringr)
checkpoint("2016-08-08")
install.packages('opencpu')
library(devtools)
install_github("gitstats", "opencpu")
opencpu$browse("library/gitstats/www")
library(opencpu)
opencpu$browse("library/gitstats/www")
?opencpu
library(opencpu)
?opencpu
opencpu$browse('/test')
opencpu$stop()
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?dplyr
library(dplyr)
mutate(mtcars, displ_l = disp / 61.0237)
transmute(mtcars, displ_l = disp / 61.0237)
mutate(mtcars, displ_l = disp / 61.0237)
str(transmute(mtcars, displ_l = disp / 61.0237))
vignette('nse')
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
data("mtcars")
mtcars %>% mutate_("teste " = "mpg"^2)
mtcars %>% mutate_(teste = mpg^2)
mtcars %>% mutate_(teste = "mpg^2")
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
?starts_with()
?select_helpers
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
