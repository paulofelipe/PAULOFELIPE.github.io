install.packages('servr', repos = 'http://yihui.name/xran')
install.packages('servr')
x <- 2
(x + x*2 + x^2 + x^x)
x + x*2 + x^2 + x^x
x <- 2
x + x*2 + x^2 + x^x
install.packages('readr')
library(readr)
guess_encoding('~/Documentos/Dados Exemplos/desemprego_uf_ponto_virgula.txt')
install.packages("titanic")
data('titanic')
library(titanic)
data("Titanic")
Titanic
data("titanic_train")
head(titanic_train)
titanic_train
head(titanic_train)
summary(data)
summary(train)
summary(titanic_train
)
install.packages('Amelia')
library(Amelia)
missmap(titanic_train)
summary(titanic_train)
missmap(titanic_train, title = 'teste')
View(titanic_train)
unique(titani])
unique(titanic_train$Cabin)
titanic_train$Cabin[titanic_train$Cabin == ""] <- NA_character_
missmap(titanic_train)
?boxplot
boxplot(Fare ~ Survived, data = titanic_train)
head(titanic_train)
install.packages("flexdashboard")
library(flexdashboard)
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "TESTE", color = "blue")
valueBox(10, caption = "Teste", icon = "fa fa-stop", color = "dodgerblue")
library(htmltools)
strong(h1(x))
x <- "Teste"
library(htmltools)
strong(h1(x))
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = "Teste2")
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = list(texto = "Teste2"))
rmarkdown::render("~/Downloads/teste_flexdashboard.Rmd", params = list(texto = "Teste2"), output_dir = "~/Downloads/html_output/")
library(xtable)
"
dados <- data.frame(grupo = c("a", "b", "c", "a", "b", "c"), value = c(10, 15, 20, 4, 3, 1), id = c(rep("teste",3), rep("tééste2",3)))
xtable(dados)
xtable(dados, "html")
print(xtable(dados))
print(xtable(dados), type = 'html')
print(xtable(dados), type = 'html')[1]
cat(print(xtable(dados), type = 'html')[1])
cat(xtable(dados))
library(knitr)
kable(dados)
?kable
kable(dados, format = 'html')
sub("<table>", "<table class = "table-condesed">", kable(dados, format = 'html')
sub("<table>", '<table class = "table-condesed">', kable(dados, format = 'html')
sub("<table>", '<table class = "table-condesed">', kable(dados, format = 'html'))
library(knitr)
k <- kable(dados, format = 'html')
sub("<table>", '<table class="table table-striped">', kable(dados, format = 'html'))
sub("<table>", '<table class="table table-striped">', k)
?kable
header <- '<th style="text-align:left;"> grupo </th>
<th style="text-align:right;"> value </th>
<th style="text-align:left;"> id </th>'
header
sub(header, "a", k)
sub(header, new_header, k)
k <- kable(dados, format = 'html', pad = 0)
k <- sub("<table>", '<table class="table table-striped">', k)
header <- '<th style="text-align:left;"> grupo </th>
<th style="text-align:right;"> value </th>
<th style="text-align:left;"> id </th>'
new_header <- '<th class="col-md-6" style="text-align:left;"> grupo </th>
<th class="col-md-3" style="text-align:right;"> value </th>
<th class="col-md-3" style="text-align:left;"> id </th>'
sub(header, new_header, k)
k <- kable(dados, format = 'html', pad = 0)
k
k
str(k)
install.packages('hmtlTable')
install.packages('htmlTable')
library(htmlTable)
htmlTable(dados)
print(htmlTable(dados))
str(htmlTable(dados))
str(htmlTable(dados))[1]
htmlTable(dados)[1]
htmlTable(dados, row.names = FALSE)
htmlTable(dados, align = c("lcr"))
htmlTable(dados, align = c("lcr"), rnames = FALSE)
cat(htmlTable(dados, align = c("lcr"), rnames = FALSE)[1])
kable(dados, )
kable(dados, format = 'html')
kable(dados, format = 'html', table.attr='class="table table-stripped")
kable(dados, format = 'html', table.attr='class="table table-stripped"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"')
library(flexdashboard)
?valueBox
valueBox(42, caption = "Errors", icon="fa-thumbs-down")
k
dados
dados <- data.frame(grupo = c("a", "b", "c", "a", "b", "c"), value = c(10, 15, 20, 4, 3, 1), id = c(rep("teste",3), rep("tééste2",3)))
library(knitr)
kable(dados)
kable(dados, 'html')
kable(dados, 'html', digits = 2)
kable(dados, 'html', digits = 2,)
kable(dados, 'html', digits = 2)
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr = 'class="teste"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr = 'class="teste22"')
kable(dados, format = 'html', table.attr='class="table table-stripped" id = "teste"', td.attr='class="teste22"')
formattable::formattable(dados)
formattable::formattable(dados)[1]
cat(formattable::formattable(dados))
formattable::format_table(dados)
formattable::format_table(dados, format = 'html')
formattable::format_table(dados, format = 'markdown')
formattable::format_table(dados, format = 'pandoc')
library(formattable)
?formattable
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formatR)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
install.packages("formattable")
install.packages("formattable")
library(formattable)
formattable(df, formatter =  list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = normalize_bar("pink", 0.2),
test2_score = normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
?format_table
format_table(mtcars, list(mpg = formatter("span",
style = x ~ style(display = "block",
"border-radius" = "4px",
"padding-right" = "4px",
color = "white",
"background-color" = rgb(x/max(x), 0, 0)))))
library(flexdashboard)
?valueBox
valueBox(42, caption = "Errors", icon="fa-thumbs-down")
install.packages("ISLR")
?ISLR
??ISLR
library(ISLR)
data("Carseats")
head(Carseats)
summary(Carseats)
class(Carseats)
str(Carseats)
hist(Carseats$Sales)
sum(Carseats$Sales == 0)
lm(Sales ~ ., data = Carseats)
summary(lm(Sales ~ ., data = Carseats))
dim(Carseats)
summary(lm(log(Sales+1) ~ ., data = Carseats))
summary(lm(log(Sales) ~ ., data = Carseats))
summary(lm(log(Sales) ~ ., data = Carseats[Carseats$Sales>0,]))
summary(lm(log(Sales+1) ~ log(CompPrice), data = Carseats))
summary(lm(log(Sales+1) ~ log(CompPrice) + log(Price), data = Carseats))
summary(lm(log(Sales+0.001) ~ log(CompPrice) + log(Price), data = Carseats))
summary(lm(log(Sales+0.0000001) ~ log(CompPrice) + log(Price), data = Carseats))
summary(lm(log(Sales) ~ log(CompPrice) + log(Price), data = Carseats[Carseats$Sales>0]))
summary(lm(log(Sales) ~ log(CompPrice) + log(Price), data = Carseats[Carseats$Sales>0,]))
install.packages('DT')
library(DT)
library(DT)
m = cbind(matrix(rnorm(60, 1e5, 1e6), 20), runif(20), rnorm(20, 100))
m[, 1:3] = round(m[, 1:3])
m[, 4:5] = round(m[, 4:5], 7)
colnames(m) = head(LETTERS, ncol(m))
head(m)
datatable(m) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ",") %>% formatPercentage('D', 2)
datatable(m) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
datatable(m, options = list(language.decimal = ",")) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
?datatable
m <- m %>% mut
library(dplyr)
m <- m %>% mutate(E = sub(".",",",E))
m <- m %>% mutate(E = formatC(E, big.mark = ".", decimal.mark = ","))
m$E
m
m <- data.frame(m)
m
m$E
formatC(m$E, decimal.mark = ",", big.mark = ".")
m$E <- formatC(m$E, decimal.mark = ",", big.mark = ".")
str(m)
datatable(m, options = list(language.decimal = ",")) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
m = cbind(matrix(rnorm(60, 1e5, 1e6), 20), runif(20), rnorm(20, 100))
m
datatable(m, options = list(rowCallback = JS("
function(row, data) {
var d = data[5]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}"))) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
m = cbind(matrix(rnorm(60, 1e5, 1e6), 20), runif(20), rnorm(20, 100))
m[, 1:3] = round(m[, 1:3])
m[, 4:5] = round(m[, 4:5], 7)
colnames(m) = head(LETTERS, ncol(m))
head(m)
datatable(m, options = list(rowCallback = JS("
function(row, data) {
var d = data[5]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}"))) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
datatable(m) %>% formatCurrency(c('A', 'C'), currency = "R$", mark = ".") %>% formatPercentage('D', 2)
# use , for the 1st column
datatable(iris, options = list(rowCallback = JS("
function(row, data) {
var d = data[1]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}")))
# use , for the 1st column
datatable(iris, options = list(rowCallback = JS("
function(row, data) {
var d = data[1:2]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}")))
# use , for the 1st column
datatable(iris, options = list(rowCallback = JS("
function(row, data) {
var d = data[1,2]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}")))
# use , for the 1st column
datatable(iris, options = list(rowCallback = JS("
function(row, data) {
var d = data[1,2]; $(this.api().cell(row, 1).node()).html(d.toString().replace('.', ','));
}"), language.decimal = ","))
library(formattable)
formattable(iris)
?formattable
library(knitr)
kable(iris)
kable(iris, format = 'html')
k <- kable(iris, format = 'html')
k
k <- kable(iris, format = 'html', align = c('l',"r"))
k
head(k)
k[1]
str(k)
k
writeLines(k, con = 'Documentos/teste.txt')
?kable
k <- kable(iris, format = 'html', align = c('l',"r"), table.attr = "class=\"table table-condensed\"")
writeLines(k, con = 'Documentos/teste.txt')
Sys.getenv()
Sys.setenv(JAVA_HOME = '/usr/lib/jvm/java-8-openjdk-amd64/')
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
getwd()
Sys.setenv(JAVA_HOME = '/usr/lib/jvm/java-8-openjdk-amd64/')
getwd()
install.packages('rJava')
path <- file.path('/home/paulo/Documentos/IC/Teste/Intercambio_Comercial_V2/')
setwd(path)
packrat::on()
packrat::status()
packrat::off()
setwd('~/Documentos/IC/Teste/Intercambio_Comercial_V2/d3plusdeaex/')
devtools::install()
getwd('~/')
setwd('~/')
getwd('~/')
getwd()
library(d3plusdeaex)
data <- data.frame(year = seq.Date(from = as.Date("2001-01-01"), length.out = 15, by = "1 month"),
valor = sample(1:30,15, replace = TRUE), id = "Exportações")
data2 <- data.frame(year = seq.Date(from = as.Date("2001-01-01"),length.out = 15, by = "1 month"),
valor = sample(1:30,15, replace = TRUE)/3, id = "Importações")
data <- rbind(data, data2)
data$year <- gsub("-","/", x = data$year)
d3plusline(data = data, x = "year", y = "valor", id = "id", xlabel = "Ano",
ylabel = "Valor R$",
title = "Comparação entre Importações e Exportações", xtime = TRUE,
date_format = "%b/%Y", legend = TRUE)
data
setwd("~/Documentos/Kaggle_Bimbo/")
library(data.table)
setwd("~/Documentos/Kaggle_Bimbo/")
dados <- fread('train.csv', nrows = 1000)
head(dados)
product_data <- fread('producto_tabla.csv')
product_data
sort(unique(dados$Semana))
test <- fread('test.csv')
head(test)
head(train)
head(dados)
train <- fread('train.csv')
unique(train[,Semana])
rm(train)
gc()
rm(list = ls())
gc()
gc()
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
source('~/Documentos/paulofelipe.github.io/source/build_paulo_pc.R', echo=TRUE)
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
library(cars)
package(lmtest)
library(lmtest)
install.packages('lmtest')
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
setwd("~/Documentos/paulofelipe.github.io/source")
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = FALSE,
command = "rake generate")
# Se não funcionar
# rbenv exec bundle install --path vendor/bundle
